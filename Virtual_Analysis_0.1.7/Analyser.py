# coding=UTF-8
import MySQLdb
import operator
def get_data(sql):
    conn = MySQLdb.connect("localhost", "root", "root", "Test")
    cursor = conn.cursor()
    # 查询test表中id为11的记录，并将记录数目返回给count
    cursor.execute(sql)
    # 重置游标位置，0,为偏移量，mode＝absolute | relative,默认为relative,
    if(cursor.rowcount!=0):
        cursor.scroll(0, mode='absolute')
        results = cursor.fetchall()
    else:
        results=()
    conn.close()
    return results

def Node_Length_Analyse(nodes):
    max=200
    min=0
    prop=0
    all=0
    sum=0
    propdic={}
    for node in nodes:
        sql="SELECT length FROM `data` where srcIp='"+node+"'or dscIp='"+node+"'"
        results=get_data(sql)
        for result in results:
            all+=1
            if result[0]>min and result[0]<max:
                sum+=1
        prop=float(sum)/all
        propdic[node]=prop
        sum=0
        all=0
        ordered_propdic = sorted(propdic.items(), key=lambda x: x[1], reverse=True)
    return ordered_propdic


def Node_Links_Analyse(nodes):
    Links={}
    for node in nodes:
        sql="SELECT sum(count) FROM `link` where IP1='"+node+"'OR IP2='"+node+"'"
        results=get_data(sql)
        for result in results:
            Links[node]=result[0]
        ordered_Links = sorted(Links.items(), key=lambda x: x[1], reverse=True)
    return ordered_Links

def All_Link_Analyse():
    sql = "SELECT * FROM `link`"
    results = get_data(sql)
    Links=[]
    for result in results:
        IP1=result[1]
        IP2=result[2]
        Link=(IP1,IP2)
        Links.append(Link)
    return Links
def Link_Connections():
    sql = "SELECT * FROM `link`"
    results = get_data(sql)
    Links = {}
    for result in results:
        IP1 = result[1]
        IP2 = result[2]
        connection=result[3]
        str=IP1+"->"+IP2
        Links[str]=connection
        # sql = "SELECT protocol,appProto FROM `data` where (srcIp='" + IP1 + "'and dscIp='"+IP2+"')or(srcIp='"+IP2+"'and dscIp='"+IP1+"')"
        ordered_Links = sorted(Links.items(), key=lambda x: x[1], reverse=True)
    return ordered_Links
def Link_Connection(IP1,IP2):
    sql = "SELECT count FROM `link` where (IP1='" + IP1 + "'and IP2='"+IP2+"')or(IP1='"+IP2+"'and IP2='"+IP1+"')"
    results = get_data(sql)
    count=0
    for result in results:
        count=result[0]
        break
    return count

def Link_Length_Analyse(IP1,IP2):
    i=0
    String=[]
    sql="SELECT length FROM `data`  where (srcIp='" + IP1 + "'and dscIp='"+IP2+"')or(srcIp='"+IP2+"'and dscIp='"+IP1+"')"
    results=get_data(sql)
    max=200
    min=0
    while i<2:
        count = 0
        sum = 0
        for result in results:
            if result[0]>min and result[0]<max:
                count+=1
            sum+=1
        prop=round(float(count)/sum,5)
        String.append(str(count)+"/"+str(prop))
        max = 1500
        min = 1000
        i+=1
    return String


def Link_Protocol_Analyse(IP1,IP2,mode=0):
    String = []
    DNS = 0
    HTTP = 0
    HTTPS = 0
    TCP = 0
    UDP = 0
    sum = 0
    if mode == 0:
        sql = "SELECT protocol,appProto FROM `data`  where (srcIp='" + IP1 + "'and dscIp='" + IP2 + "')or(srcIp='" + IP2 + "'and dscIp='" + IP1 + "')"
    if mode == 1:
        sql = "SELECT protocol,appProto FROM `data`  where (srcIp='" + IP1 + "'and dscIp='" + IP2 + "')"
    results = get_data(sql)
    for result in results:
        sum+=1
        if operator.eq(result[1],"null")==True:
            if result[0]==17:
                UDP+=1
            elif result[0]==6:
                TCP+=1
        else:
            if operator.eq(result[1],"HTTP")==True:
                HTTP+=1
                continue
            if operator.eq(result[1],"HTTPS") == True:
                HTTPS += 1
                continue
            if operator.eq(result[1],"DNS") == True:
                DNS += 1
                continue
    if sum == 0:
        sum = 1
    prop = round(float(DNS) / sum, 5)
    String.append(str(DNS) + "/" + str(prop))
    prop = round(float(HTTP) / sum, 5)
    String.append(str(HTTP) + "/" + str(prop))
    prop = round(float(HTTPS) / sum, 5)
    String.append(str(HTTPS) + "/" + str(prop))
    prop = round(float(TCP) / sum, 5)
    String.append(str(TCP) + "/" + str(prop))
    prop = round(float(UDP) / sum, 5)
    String.append(str(UDP) + "/" + str(prop))
    return String

def Wrong_Matched_Port():
    IPs={}
    sql="select srcIp,dscIp from `data` where srcPort=80 AND appProto='null'"
    count=0
    results=get_data(sql)
    for result in results:
        str=result[0]+"->"+result[1]+"     HTTP-80"
        if str in IPs:
            count=IPs[str]
            IPs[str]=count+1
        else:
            count=1
            IPs[str]=count
    IPs = sorted(IPs.items(), key=lambda x: x[1], reverse=True)
    return IPs

def DNS_HTTP_Mode():
    DH_Mode=[]
    sql = "select * from `data` where appProto='DNS' and  appInform4 is not null "
    results = get_data(sql)
    if  results:
        for result in results:
            DNS_Server=result[3]
            Queryer=result[4]
            Answer=result[13]
            DH_Single=[]
            DH_Single.append(Queryer)
            DH_Single.append(result[3])
            DH_Single.append(Answer)
            sql = "select * from `data` where appProto='HTTP' and  srcIp='"+Queryer+"'and dscIp='"+Answer+"'"
            results = get_data(sql)
            if results:
                sql = "select count from `link` where (IP1='" + Queryer + "'and IP2='" + Answer + \
                      "')or(IP1='"+Answer+"'and IP2='"+Queryer+"')"
                results = get_data(sql)
                DH_Single.append(results[0][0])
                DH_Mode.append(DH_Single)
            else:
                print("null")
    else:
        print("null")
    IP_Links={}
    for DH_Single in DH_Mode:
        str=DH_Single[0]+"->"+DH_Single[1]+"->"+DH_Single[2]
        IP_Links[str] = DH_Single[3]
    IP_Links = sorted(IP_Links.items(), key=lambda x: x[1], reverse=True)
    return IP_Links



