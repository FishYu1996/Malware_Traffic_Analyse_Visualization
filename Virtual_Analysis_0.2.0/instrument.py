# coding=UTF-8
import Draw_Graph
import operator
import Analyser


def change_IPs_to_Links_str(tuple_list):
    Link_string_list=[]
    for tuple in tuple_list:
        Link_string=tuple[0]+"->"+tuple[1]
        Link_string_list.append(Link_string)
    return Link_string_list


def change_list_to_dict(tuple_list,data_list):
    dict={}
    i=0;
    while i < len(tuple_list):
        dict[tuple_list[i]]=data_list[i]
        i+=1
    return dict


def change_abnormal_dict_to_tuplelist(dict,option):
    tuplelist=[]
    for key in dict.keys():
        tuple=(key,dict[key][option])
        tuplelist.append(tuple)
    order_tuplelist = sorted(tuplelist, key=lambda x: x[1], reverse=True)
    return order_tuplelist


def create_abnormal_IPs_dict(IPs_list):
    abnormal_IPs_detail={}
    abnormal_IPs_detail_dict={}
    mode = 0
    for IP in IPs_list:
        IPs = Draw_Graph.degree(mode)
        for IP_degree in IPs:
            if operator.eq(IP, IP_degree[0]) == True:
                abnormal_IPs_detail["degree"]=IP_degree[1]
                break
        IPs = Draw_Graph.betweeness(mode)
        for IP_betweeness in IPs:
            if operator.eq(IP, IP_betweeness[0]) == True:
               abnormal_IPs_detail["betweeness"]=round(IP_betweeness[1], 5)
               break
        IPs = Draw_Graph.degree_centrality(mode)
        for IP_centrality in IPs:
            if operator.eq(IP, IP_centrality[0]) == True:
                abnormal_IPs_detail["centrality"]=round(IP_centrality[1], 5)
                break
        IP_list = []
        IP_list.append(IP)
        abnormal_IPs_detail["link"]=Analyser.Node_Links_Analyse(IP_list)[0][1]
        abnormal_IPs_detail["length_prop"]=round(Analyser.Node_Length_Analyse(IP_list)[0][1], 5)
        abnormal_IPs_detail_dict[IP]=abnormal_IPs_detail.copy()
    return abnormal_IPs_detail_dict
