# coding=UTF-8
import MySQLdb


#为了正常批量写入数据库，改写了第三方库mysqldb中converts的Thing2Str函数及connections的literal函数
def create_table(table_name):
    conn = MySQLdb.connect("localhost", "root", "root", "yjj_design")
    if table_name == "basic_part":
        table_setting = "basic_part_data(Id INT PRIMARY KEY AUTO_INCREMENT, Second INT," \
                        " MilliSecond INT, Len INT, Src_mac VARCHAR(20), Dst_mac VARCHAR(20), IP_version INT," \
                        " Src_IP VARCHAR(16), Dst_IP VARCHAR(16),IP_head_len INT,TTL INT, Protocol INT)"
    elif table_name == "TCP_part":
        table_setting = "tcp_part_data(Id INT, Src_port INT, Dst_port INT, Seq_num BIGINT, Ack_num BIGINT, " \
                        "Tcp_head_len INT,Flag VARCHAR(4), Option_len INT, Option_content VARCHAR(32), " \
                        "Application VARCHAR(8))"
    elif table_name == "UDP_part":
        table_setting = "udp_part_data(Id INT, Src_port INT, Dst_port INT, UDP_len INT, Application VARCHAR(8))"
    elif table_name == "HTTP_part":
        table_setting = "http_part_data(Id INT, Direction VARCHAR(10), Method VARCHAR(9), Host VARCHAR(50)," \
                        "URI VARCHAR(50), Content_type VARCHAR(50), Content_length INT)"
    elif table_name == "DNS_part":
        table_setting = "dns_part_data(Id INT, Transaction_id INT, Direction VARCHAR(8), Domain VARCHAR(50),"\
                        "IP_address VARCHAR(16))"
    elif table_name == "HTTPS_part":
        table_setting = "https_part_data(Id INT)"
    elif table_name == "net_statistic_feature":
        table_setting = "net_statistic_feature(Id INT PRIMARY KEY AUTO_INCREMENT, " \
                        "Duration INT, All_packet_num INT, Average_len FLOAT, Ip_kind_num INT, " \
                        "Ip_connection_kind_num INT, Tcp_flow_num INT, Pps FLOAT,Protocol_proportion VARCHAR(32), " \
                        "Length_distribution VARCHAR(50),Label VARCHAR(8))"
    elif table_name == "social_network_ip_links":
        table_setting = "social_network_ip_links(Id INT PRIMARY KEY AUTO_INCREMENT,Src_IP VARCHAR(16)," \
                        "Dst_IP VARCHAR(16), Number INT)"
    elif table_name == "social_network_data":
        table_setting = "social_network_data(Id INT PRIMARY KEY AUTO_INCREMENT,IP VARCHAR(16),Degree INT," \
                        "Degree_centrality FLOAT,Betweeness_centrality FLOAT, Closeness_centrality FLOAT, " \
                        "Connections INT)"
    else:
        print("error input")
        return

    try:
        cursor = conn.cursor()
        sql = "CREATE TABLE IF NOT EXISTS "+table_setting
        cursor.execute(sql)
    except:
        conn.rollback()
        print("error: create table")
        print("error for " + sql)
    finally:
        conn.close()
        return


#查询数据
def get_data(sql):
    conn = MySQLdb.connect("localhost", "root", "root", "yjj_design")
    try:
        cursor = conn.cursor()
        # 查询test表中id为11的记录，并将记录数目返回给count
        cursor.execute(sql)
        # 重置游标位置，0,为偏移量，mode＝absolute | relative,默认为relative,
        if(cursor.rowcount!=0):
            cursor.scroll(0, mode='absolute')
            results = cursor.fetchall()
        else:
            results = ()
    except:
        print("error:get data!")
        print("error for " + sql)
        results = ()
    finally:
        conn.close()
    return results


#单句操作
def single_execute(sql):
    conn = MySQLdb.connect("localhost", "root", "root", "yjj_design")
    error_flag = True
    try:
        cursor = conn.cursor()
        cursor.execute(sql)
    except:
        print("error:single execute")
        print("error for " + sql)
        error_flag = False
    finally:
        if error_flag:
            cursor.close()
            conn.commit()
        conn.close()


#清空指定表
def clear_table(table):
    conn = MySQLdb.connect("localhost", "root", "root", "yjj_design")
    sql = "truncate " + table
    try:
        cursor = conn.cursor()
        cursor.execute(sql)
        print("clear complete")
    except:
        print("error:clear table")
        print("error for " + sql)
    finally:
        conn.close()


#批量写数据
def insert_batch(sql, list):
     conn = MySQLdb.connect("localhost", "root", "root", "yjj_design")
     list_id = 0
     batch_max_size = 50
     batch_size = batch_max_size
     remain_size = len(list)
     try:
         cursor = conn.cursor()
         while remain_size > 0:
             if remain_size > batch_max_size:
                 batch_size = batch_max_size
             else:
                 batch_size = remain_size
             for j in range(0, batch_size):
                 cursor.execute(sql, list[list_id])
                 list_id += 1
             conn.commit()
             print("已提交"+ str(list_id) + "项")
             remain_size -= batch_size
     #except:
         #print("error: insert batch")
     finally:
         conn.close()


#返回指定表最后一项的id,用于写入数据库时自增id - 事实上主键可以自增,但是既然已经写了这个了,就不折腾主键自增的设置了.
def find_next_id(table):
    sql = "select Id from `"+table+"` order by Id desc LIMIT 1"
    results = get_data(sql)
    if not results:
        id = 1
    else:
        for result in results:
            id = result[0] + 1
            break
    return id


if __name__ == '__main__':
     tables = ["basic_part", "TCP_part", "UDP_part", "HTTP_part", "DNS_part", "HTTPS_part", "net_statistic_feature"]
     for table in tables:
         create_table(table)
     print("create table complete")