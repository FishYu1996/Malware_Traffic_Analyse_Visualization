# coding=UTF-8
from tkinter import *
from PIL import Image, ImageTk
from tkinter import filedialog
from tkinter import scrolledtext
from tkinter import messagebox
from tkinter import ttk
import Pcap_class
import save_data
import statistic_analysis
import copy
import social_network_graphs
import operator
import SVM_test


class GUI_main():
    maxWidth = 0
    maxHeight = 0
    load_in_flag = 0  # 导入标记，0未导入，1导入
    flag_for_section = 0  # 板块标记,0统计模块

    def __init__(self):
        self.root = Tk()
        self.window_init()
        self.create_menu()
        self.create_widges()
        self.packet_load_num = 1000
        self.model = 0

    def window_init(self):
        self.root.title('流量分析系统')
        self.maxWidth, self.maxHeight = self.root.maxsize()
        self.root.geometry("{}x{}".format(self.maxWidth, self.maxHeight))

    def create_menu(self):
        self.menu = Menu(self.root)
        self.root.config(menu=self.menu)  # 创建“系统”子菜单
        # 第一子菜单栏
        submenu = Menu(self.menu, tearoff=0)
        submenu.add_command(label="导入", command=self.load_file)
        submenu.add_command(label="设置", command=self.setup_config)
        submenu.add_separator()
        submenu.add_command(label="关于", command=self.copy_right_inform)
        submenu.add_command(label="退出", command=self.root.quit)
        self.menu.add_cascade(label="系统", menu=submenu)
        # 第二子菜单栏
        submenu = Menu(self.menu, tearoff=0)
        submenu.add_command(label="数据统计分析", command=self.statistic_analysis_entrance)
        self.menu.add_cascade(label="数据统计分析", menu=submenu)
        # 第三子菜单栏
        submenu = Menu(self.menu, tearoff=0)
        submenu.add_command(label="社会网络分析", command=self.social_analysis_entrance)
        self.menu.add_cascade(label="社会网络分析", menu=submenu)
        # 第四子菜单栏
        submenu = Menu(self.menu, tearoff=0)
        submenu.add_command(label="应用流量分类", command=self.app_classify_entrance)
        self.menu.add_cascade(label="应用流量分类", menu=submenu)
        # 第五子菜单栏
        submenu = Menu(self.menu, tearoff=0)
        submenu.add_command(label="恶意流量识别")
        self.menu.add_cascade(label="恶意流量识别", menu=submenu)

    def create_widges(self):
        #fm1
        self.fm1 = LabelFrame(self.root, text="视图")

        #self.img = Image.open('test.png')  # 打开背景图片
        #self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开

        width = int(self.maxWidth/3)
        height = self.maxHeight - 120

        self.label_image = Label(self.fm1, width=width, height=height)
        self.photo_main = self.Load_img('cover1.png',  width, height)
        self.label_image.config(image=self.photo_main)
        self.label_image.pack(side=LEFT)

        self.fm1.pack(side=LEFT,anchor="nw", padx="5", ipadx="5", ipady="2")

        # fm2
        self.fm2 = Frame(self.root)

        width = int(self.maxWidth / 3)
        height = int(self.maxHeight / 2)-45

        self.fm2_top = LabelFrame(self.fm2, text="信息输出", width=width, height=height)
        self.fm2_bottom = LabelFrame(self.fm2, text="数据选择", width=width, height=height)

        self.show_text = scrolledtext.ScrolledText(self.fm2_top, width=72, height=26, state="disable")
        self.show_text.pack(side=TOP)
        show_text = "欢迎使用本系统"
        self.change_show_text(show_text)

        width = 68
        height = 15
        self.data_choose_str = StringVar()
        self.data_choose_listbox = Listbox(self.fm2_bottom, listvariable=self.data_choose_str,
                                           width=width, height=height)
        self.data_choose_listbox.grid(row=0, column=0, padx=4, pady=4, columnspan=3)
        self.data_choose_listbox.bind("<<ListboxSelect>>", self.listbox_msg)
        self.data_choose_listbox.bind("<Double-Button-1>", self.listbox_double)

        def combobox_response(*args):
            combobox_select_str = self.model_choose_combobox.get()
            combobox_select_index = self.model_choose_combobox.current()
            if self.load_in_flag != 0:
                if combobox_select_index == 0:
                    labels = [u'TCP', u'UDP', u'DNS',u'HTTP', u'HTTPS']
                    protocol_adjust_list = copy.deepcopy(self.static_datas[-2])
                    protocol_adjust_list[0] = protocol_adjust_list[0] - protocol_adjust_list[3] - protocol_adjust_list[
                        4]
                    protocol_adjust_list[1] = protocol_adjust_list[1] - protocol_adjust_list[2]
                    statistic_analysis.draw_pie(protocol_adjust_list, labels, "protocol")
                    self.photo_main = self.Load_img('protocol_pie.png', width, height)
                    self.label_image.config(image=self.photo_main)
                elif combobox_select_index == 1:
                    labels = [u'TCP', u'UDP', u'DNS',u'HTTP', u'HTTPS']
                    protocol_adjust_list = [self.static_datas[2],self.static_datas[3],self.static_datas[6],
                                            self.static_datas[4],self.static_datas[5]]
                    statistic_analysis.draw_bar(protocol_adjust_list, labels,"protocol")
                    self.photo_main = self.Load_img('protocol_bar.png', width, height)
                    self.label_image.config(image=self.photo_main)
                if combobox_select_index == 2:
                    labels = [u'0-200', u'200-400', u'400-600',  u'600-800',  u'800-1000', u'1000-1200', u'1200-1400',
                              u'1400-1600']
                    protocol_adjust_list = copy.deepcopy(self.static_datas[-1])
                    statistic_analysis.draw_pie(protocol_adjust_list, labels, "length")
                    self.photo_main = self.Load_img('length_pie.png', width, height)
                    self.label_image.config(image=self.photo_main)
                elif combobox_select_index == 3:
                    labels = [u'200', u'400', u'600', u'800', u'1000', u'1200', u'1400', u'1600']
                    length_adjust_list = [int(x * self.static_datas[1]/100) for x in self.static_datas[-1]]
                    statistic_analysis.draw_bar(length_adjust_list, labels, "length")
                    self.photo_main = self.Load_img('length_bar.png', width, height)
                    self.label_image.config(image=self.photo_main)
            else:
                messagebox.showinfo("提示：", "未导入数据")

        width = 66
        self.model_choose_str = StringVar
        self.model_choose_combobox = ttk.Combobox(self.fm2_bottom, textvariable=self.model_choose_str,
                                                  width=width)
        self.model_choose_combobox["value"] = ("协议分布饼图", "协议分布柱状图", "大小分布饼图", "大小分布柱状图")
        self.model_choose_combobox.current(0)
        self.model_choose_combobox.grid(row=1, column=0, padx=4, pady=4, columnspan=3)
        self.model_choose_combobox.bind("<<ComboboxSelected>>", combobox_response)

        self.fm2_top.pack(side=TOP, anchor="nw")
        self.fm2_bottom.pack(side=TOP, anchor="nw")
        self.fm2.pack(side=LEFT, anchor="nw", padx="5", ipadx="2", ipady="2")
        self.fm2_top.pack_propagate(False)
        self.fm2_bottom.grid_propagate(False)

        # fm3
        width = int(self.maxWidth / 3)
        height = int((self.maxHeight/2)-45)
        self.fm3 = Frame(self.root)
        self.fm3_top = LabelFrame(self.fm3,text="数据分析", width=width, height=height)
        self.fm3_bottom = LabelFrame(self.fm3,text="控制命令", width=width, height=height)
        self.dataLabel_1 = Label(self.fm3_top,text="属性1", width=16, height=2, anchor=CENTER)
        self.dataValue_1 = Label(self.fm3_top,text="数值1", width=10, height=2, anchor=CENTER)
        self.dataLabel_2 = Label(self.fm3_top,text="属性2", width=16, height=2, anchor=CENTER)
        self.dataValue_2 = Label(self.fm3_top,text="数值2", width=10, height=2, anchor=CENTER)
        self.dataLabel_3 = Label(self.fm3_top,text="属性3", width=16, height=2, anchor=CENTER)
        self.dataValue_3 = Label(self.fm3_top,text="数值3", width=10, height=2, anchor=CENTER)
        self.dataLabel_4 = Label(self.fm3_top,text="属性4", width=16, height=2, anchor=CENTER)
        self.dataValue_4 = Label(self.fm3_top,text="数值4", width=10, height=2, anchor=CENTER)
        self.dataLabel_5 = Label(self.fm3_top,text="属性5", width=16, height=2, anchor=CENTER)
        self.dataValue_5 = Label(self.fm3_top,text="数值5", width=10, height=2, anchor=CENTER)
        self.dataLabel_6 = Label(self.fm3_top,text="属性6", width=16, height=2, anchor=CENTER)
        self.dataValue_6 = Label(self.fm3_top,text="数值6", width=10, height=2, anchor=CENTER)
        self.dataLabel_7 = Label(self.fm3_top, text="属性7", width=16, height=2, anchor=CENTER)
        self.dataValue_7 = Label(self.fm3_top, text="数值7", width=10, height=2, anchor=CENTER)
        self.dataLabel_8 = Label(self.fm3_top, text="属性8", width=16, height=2, anchor=CENTER)
        self.dataValue_8 = Label(self.fm3_top, text="数值8", width=10, height=2, anchor=CENTER)
        self.dataLabel_9 = Label(self.fm3_top, text="属性9", width=16, height=2, anchor=CENTER)
        self.dataValue_9 = Label(self.fm3_top, text="数值9", width=10, height=2, anchor=CENTER)
        self.dataLabel_10 = Label(self.fm3_top,text="属性1", width=16, height=2, anchor=CENTER)
        self.dataValue_10 = Label(self.fm3_top,text="数值1", width=10, height=2, anchor=CENTER)
        self.dataLabel_11 = Label(self.fm3_top,text="属性2", width=16, height=2, anchor=CENTER)
        self.dataValue_11 = Label(self.fm3_top,text="数值2", width=10, height=2, anchor=CENTER)
        self.dataLabel_12 = Label(self.fm3_top,text="属性3", width=16, height=2, anchor=CENTER)
        self.dataValue_12 = Label(self.fm3_top,text="数值3", width=10, height=2, anchor=CENTER)
        self.dataLabel_13 = Label(self.fm3_top,text="属性4", width=16, height=2, anchor=CENTER)
        self.dataValue_13 = Label(self.fm3_top,text="数值4", width=10, height=2, anchor=CENTER)
        self.dataLabel_14 = Label(self.fm3_top,text="属性5", width=16, height=2, anchor=CENTER)
        self.dataValue_14 = Label(self.fm3_top,text="数值5", width=10, height=2, anchor=CENTER)
        self.dataLabel_15 = Label(self.fm3_top,text="属性6", width=16, height=2, anchor=CENTER)
        self.dataValue_15 = Label(self.fm3_top,text="数值6", width=10, height=2, anchor=CENTER)
        self.dataLabel_16 = Label(self.fm3_top, text="属性7", width=16, height=2, anchor=CENTER)
        self.dataValue_16 = Label(self.fm3_top, text="数值7", width=10, height=2, anchor=CENTER)
        self.dataLabel_17 = Label(self.fm3_top, text="属性8", width=16, height=2, anchor=CENTER)
        self.dataValue_17 = Label(self.fm3_top, text="数值8", width=10, height=2, anchor=CENTER)
        self.dataLabel_18 = Label(self.fm3_top, text="属性9", width=16, height=2, anchor=CENTER)
        self.dataValue_18 = Label(self.fm3_top, text="数值9", width=10, height=2, anchor=CENTER)

        self.dataLabel_1.grid(row=0, column=0, columnspan=1)
        self.dataLabel_2.grid(row=1, column=0, columnspan=1)
        self.dataLabel_3.grid(row=2, column=0, columnspan=1)
        self.dataLabel_4.grid(row=3, column=0, columnspan=1)
        self.dataLabel_5.grid(row=4, column=0, columnspan=1)
        self.dataLabel_6.grid(row=5, column=0, columnspan=1)
        self.dataLabel_7.grid(row=6, column=0, columnspan=1)
        self.dataLabel_8.grid(row=7, column=0, columnspan=1)
        self.dataLabel_9.grid(row=8, column=0, columnspan=1)
        self.dataLabel_10.grid(row=0, column=3, columnspan=1)
        self.dataLabel_11.grid(row=1, column=3, columnspan=1)
        self.dataLabel_12.grid(row=2, column=3, columnspan=1)
        self.dataLabel_13.grid(row=3, column=3, columnspan=1)
        self.dataLabel_14.grid(row=4, column=3, columnspan=1)
        self.dataLabel_15.grid(row=5, column=3, columnspan=1)
        self.dataLabel_16.grid(row=6, column=3, columnspan=1)
        self.dataLabel_17.grid(row=7, column=3, columnspan=1)
        self.dataLabel_18.grid(row=8, column=3, columnspan=1)

        self.dataValue_1.grid(row=0, column=1, columnspan=2)
        self.dataValue_2.grid(row=1, column=1, columnspan=2)
        self.dataValue_3.grid(row=2, column=1, columnspan=2)
        self.dataValue_4.grid(row=3, column=1, columnspan=2)
        self.dataValue_5.grid(row=4, column=1, columnspan=2)
        self.dataValue_6.grid(row=5, column=1, columnspan=2)
        self.dataValue_7.grid(row=6, column=1, columnspan=2)
        self.dataValue_8.grid(row=7, column=1, columnspan=2)
        self.dataValue_9.grid(row=8, column=1, columnspan=2)
        self.dataValue_10.grid(row=0, column=4, columnspan=2)
        self.dataValue_11.grid(row=1, column=4, columnspan=2)
        self.dataValue_12.grid(row=2, column=4, columnspan=2)
        self.dataValue_13.grid(row=3, column=4, columnspan=2)
        self.dataValue_14.grid(row=4, column=4, columnspan=2)
        self.dataValue_15.grid(row=5, column=4, columnspan=2)
        self.dataValue_16.grid(row=6, column=4, columnspan=2)
        self.dataValue_17.grid(row=7, column=4, columnspan=2)
        self.dataValue_18.grid(row=8, column=4, columnspan=2)

        self.buttom1 = Button(self.fm3_bottom, text="按钮1", width=15, height=2, command = self.function_one)
        self.buttom2 = Button(self.fm3_bottom, text="按钮2", width=15, height=2, command = self.function_two)
        self.buttom3 = Button(self.fm3_bottom, text="按钮3", width=15, height=2, command = self.function_three)
        self.tipLabel = Label(self.fm3_bottom, text="输入命令", width=60, height=2, anchor=W)
        self.inputText = Text(self.fm3_bottom, width=60, height=5)

        self.buttom1.grid(row=0, column=0, padx=10, pady=10)
        self.buttom2.grid(row=0, column=1)
        self.buttom3.grid(row=0, column=2)
        self.tipLabel.grid(row=1, column=0, columnspan=3, padx=10, pady=10)
        self.inputText.grid(row=2, column=0, columnspan=3, padx=10, pady=10)

        self.fm3_top.pack(side=TOP, anchor="nw")
        self.fm3_bottom.pack(side=TOP, anchor="nw")
        self.fm3.pack(side=LEFT, anchor="nw")
        self.fm3_top.grid_propagate(False)
        self.fm3_bottom.grid_propagate(False)

    def function_one(self):
        if self.model == 1:
            graph_name = self.Graph.k_clique()
            width = int(self.maxWidth / 3)
            height = self.maxHeight - 120
            self.photo_main = self.Load_img(graph_name, width, height)
            self.label_image.config(image=self.photo_main)
        else:
            print("other")

    def function_two(self):
        if self.model == 1:
            print("social")
        else:
            print("other")

    def function_three(self):
        if self.model == 1:
            print("social")
        else:
            print("other")

    def open_file(self):
        fileName = filedialog.askopenfilename(filetypes=[("PCAP", ".pcap")])
        return fileName

    def load_file(self):
        filename = self.open_file()
        print(filename)
        if filename == "":
            show_text = "取消读取文件"
            self.change_show_text(show_text)
            return
        show_text = "正在打开" + filename + " \n最大读取包数：" + str(self.packet_load_num)
        self.change_show_text(show_text)
        self.root.update()
        this_pcap_file = Pcap_class.build_pcap(filename, self.packet_load_num)
        show_text = "成功创建Pcap类，共含" + str(len(this_pcap_file.get_packets())) + "个流量包"
        self.change_show_text(show_text)
        self.load_in_flag = 1
        save_data.clear_all_table()
        show_text = "清空临时表完毕"
        self.change_show_text(show_text)
        save_data.save_data(this_pcap_file)
        show_text = "填写临时表完毕"
        self.change_show_text(show_text)
        self.static_datas = statistic_analysis.statistic_analysis_entrance()
        show_text = "统计分析完成"
        self.change_show_text(show_text)
        self.fill_data_table(self.static_datas)


        width = int(self.maxWidth / 3)
        height = self.maxHeight - 120
        labels = [u'TCP', u'UDP', u'DNS',u'HTTP', u'HTTPS']
        protocol_adjust_list = copy.deepcopy(self.static_datas[-2])
        protocol_adjust_list[0] = protocol_adjust_list[0] - protocol_adjust_list[3] - protocol_adjust_list[4]
        protocol_adjust_list[1] = protocol_adjust_list[1] - protocol_adjust_list[2]
        statistic_analysis.draw_pie(protocol_adjust_list, labels, "protocol")
        self.photo_main = self.Load_img('protocol_pie.png', width, height)
        self.label_image.config(image=self.photo_main)

    def statistic_analysis_entrance(self):
        if self.load_in_flag == 0:
            messagebox.showinfo("提示","尚未导入数据")
            return
        self.statistic_gui_init()
        self.statistic_graph()

    def statistic_gui_init(self):
        self.model = 0
        self.dataLabel_1.config(text="持续时间(秒)")
        self.dataValue_1.config(text="")
        self.dataLabel_2.config(text="包总数")
        self.dataValue_2.config(text="")
        self.dataLabel_3.config(text="TCP包总数")
        self.dataValue_3.config(text="")
        self.dataLabel_4.config(text="UDP包总数")
        self.dataValue_4.config(text="")
        self.dataLabel_5.config(text="HTTP包总数")
        self.dataValue_5.config(text="")
        self.dataLabel_6.config(text="HTTPS包总数")
        self.dataValue_6.config(text="")
        self.dataLabel_7.config(text="DNS包总数")
        self.dataValue_7.config(text="")
        self.dataLabel_8.config(text="不同IP数")
        self.dataValue_8.config(text="")
        self.dataLabel_9.config(text="不同IP连接对")
        self.dataValue_9.config(text="")
        self.dataLabel_10.config(text="PPS")
        self.dataValue_10.config(text="")
        self.dataLabel_11.config(text="平均包长(B)")
        self.dataValue_11.config(text="")
        self.dataLabel_12.config(text="TCP包占比")
        self.dataValue_12.config(text="")
        self.dataLabel_13.config(text="UDP包占比")
        self.dataValue_13.config(text="")
        self.dataLabel_14.config(text="HTTP包占比")
        self.dataValue_14.config(text="")
        self.dataLabel_15.config(text="HTTPS包占比")
        self.dataValue_15.config(text="")
        self.dataLabel_16.config(text="DNS包占比")
        self.dataValue_16.config(text="")
        self.dataLabel_17.config(text="")
        self.dataValue_17.config(text="")
        self.dataLabel_18.config(text="")
        self.dataValue_18.config(text="")
        self.data_choose_str.set((None,))


        def combobox_response(*args):
            combobox_select_str = self.model_choose_combobox.get()
            combobox_select_index = self.model_choose_combobox.current()
            width = int(self.maxWidth / 3)
            height = int((self.maxHeight / 2) - 45)
            if self.load_in_flag != 0:
                if combobox_select_index == 0:
                    labels = [u'TCP', u'UDP', u'DNS', u'HTTP', u'HTTPS']
                    protocol_adjust_list = copy.deepcopy(self.static_datas[-2])
                    protocol_adjust_list[0] = protocol_adjust_list[0] - protocol_adjust_list[3] - protocol_adjust_list[
                        4]
                    protocol_adjust_list[1] = protocol_adjust_list[1] - protocol_adjust_list[2]
                    statistic_analysis.draw_pie(protocol_adjust_list, labels, "protocol")
                    self.photo_main = self.Load_img('protocol_pie.png', width, height)
                    self.label_image.config(image=self.photo_main)
                elif combobox_select_index == 1:
                    labels = [u'TCP', u'UDP', u'DNS', u'HTTP', u'HTTPS']
                    protocol_adjust_list = [self.static_datas[2], self.static_datas[3], self.static_datas[6],
                                            self.static_datas[4], self.static_datas[5]]
                    statistic_analysis.draw_bar(protocol_adjust_list, labels, "protocol")
                    self.photo_main = self.Load_img('protocol_bar.png', width, height)
                    self.label_image.config(image=self.photo_main)
                if combobox_select_index == 2:
                    labels = [u'0-200', u'200-400', u'400-600', u'600-800', u'800-1000', u'1000-1200', u'1200-1400',
                              u'1400-1600']
                    protocol_adjust_list = copy.deepcopy(self.static_datas[-1])
                    statistic_analysis.draw_pie(protocol_adjust_list, labels, "length")
                    self.photo_main = self.Load_img('length_pie.png', width, height)
                    self.label_image.config(image=self.photo_main)
                elif combobox_select_index == 3:
                    labels = [u'200', u'400', u'600', u'800', u'1000', u'1200', u'1400', u'1600']
                    length_adjust_list = [int(x * self.static_datas[1] / 100) for x in self.static_datas[-1]]
                    statistic_analysis.draw_bar(length_adjust_list, labels, "length")
                    self.photo_main = self.Load_img('length_bar.png', width, height)
                    self.label_image.config(image=self.photo_main)
            else:
                messagebox.showinfo("提示：", "未导入数据")

        self.model_choose_combobox["value"] = ("协议分布饼图", "协议分布柱状图", "大小分布饼图", "大小分布柱状图")
        self.model_choose_combobox.current(0)
        self.model_choose_combobox.bind("<<ComboboxSelected>>", combobox_response)

    def statistic_graph(self):
        show_text = "准备分析统计数据"
        self.change_show_text(show_text)
        self.static_datas = statistic_analysis.statistic_analysis_entrance()
        show_text = "统计分析完成"
        self.change_show_text(show_text)
        self.fill_data_table(self.static_datas)

        width = int(self.maxWidth / 3)
        height = self.maxHeight - 120
        labels = [u'TCP', u'UDP', u'DNS', u'HTTP', u'HTTPS']
        protocol_adjust_list = copy.deepcopy(self.static_datas[-2])
        protocol_adjust_list[0] = protocol_adjust_list[0] - protocol_adjust_list[3] - protocol_adjust_list[4]
        protocol_adjust_list[1] = protocol_adjust_list[1] - protocol_adjust_list[2]
        statistic_analysis.draw_pie(protocol_adjust_list, labels, "protocol")
        self.photo_main = self.Load_img('protocol_pie.png', width, height)
        self.label_image.config(image=self.photo_main)

    def fill_data_table(self, datas):
        self.dataLabel_1.config(text="持续时间(秒)")
        self.dataValue_1.config(text=str(datas[0]))
        self.dataLabel_2.config(text="包总数")
        self.dataValue_2.config(text=str(datas[1]))
        self.dataLabel_3.config(text="TCP包总数")
        self.dataValue_3.config(text=str(datas[2]))
        self.dataLabel_4.config(text="UDP包总数")
        self.dataValue_4.config(text=str(datas[3]))
        self.dataLabel_5.config(text="HTTP包总数")
        self.dataValue_5.config(text=str(datas[4]))
        self.dataLabel_6.config(text="HTTPS包总数")
        self.dataValue_6.config(text=str(datas[5]))
        self.dataLabel_7.config(text="DNS包总数")
        self.dataValue_7.config(text=str(datas[6]))
        self.dataLabel_8.config(text="不同IP数")
        self.dataValue_8.config(text=str(datas[8]))
        self.dataLabel_9.config(text="不同IP连接对")
        self.dataValue_9.config(text=str(datas[9]))
        self.dataLabel_10.config(text="PPS")
        self.dataValue_10.config(text=str(datas[11]))
        self.dataLabel_11.config(text="平均包长(B)")
        self.dataValue_11.config(text=str(datas[7]))
        self.dataLabel_12.config(text="TCP包占比")
        self.dataValue_12.config(text=str(datas[12][0]) + "%")
        self.dataLabel_13.config(text="UDP包占比")
        self.dataValue_13.config(text=str(datas[12][1]) + "%")
        self.dataLabel_14.config(text="HTTP包占比")
        self.dataValue_14.config(text=str(datas[12][3]) + "%")
        self.dataLabel_15.config(text="HTTPS包占比")
        self.dataValue_15.config(text=str(datas[12][4]) + "%")
        self.dataLabel_16.config(text="DNS包占比")
        self.dataValue_16.config(text=str(datas[12][2]) + "%")
        self.dataLabel_17.config(text="TCP流数量")
        self.dataValue_17.config(text=str(datas[10]))
        self.dataLabel_18.config(text="")
        self.dataValue_18.config(text="")

    def social_analysis_entrance(self):
        self.buttom1.config(text="k_clique社区分类")
        if self.load_in_flag == 0:
            messagebox.showinfo("提示", "尚未导入数据")
            return
        self.social_gui_init()
        self.social_graph()

    def social_gui_init(self):
        self.model = 1
        self.dataLabel_1.config(text="IP")
        self.dataLabel_2.config(text="度")
        self.dataLabel_3.config(text="点度中心性")
        self.dataLabel_4.config(text="介数中心性")
        self.dataLabel_5.config(text="接近中心性")
        self.dataLabel_6.config(text="连接数")
        self.dataLabel_7.config(text="")
        self.dataLabel_8.config(text="")
        self.dataLabel_9.config(text="")
        self.dataLabel_10.config(text="")
        self.dataLabel_11.config(text="")
        self.dataLabel_12.config(text="")
        self.dataLabel_13.config(text="")
        self.dataLabel_14.config(text="")
        self.dataLabel_15.config(text="")
        self.dataLabel_16.config(text="")
        self.dataLabel_17.config(text="")
        self.dataLabel_18.config(text="")
        self.dataValue_1.config(text="")
        self.dataValue_2.config(text="")
        self.dataValue_3.config(text="")
        self.dataValue_4.config(text="")
        self.dataValue_5.config(text="")
        self.dataValue_6.config(text="")
        self.dataValue_7.config(text="")
        self.dataValue_8.config(text="")
        self.dataValue_9.config(text="")
        self.dataValue_10.config(text="")
        self.dataValue_11.config(text="")
        self.dataValue_12.config(text="")
        self.dataValue_13.config(text="")
        self.dataValue_14.config(text="")
        self.dataValue_15.config(text="")
        self.dataValue_16.config(text="")
        self.dataValue_17.config(text="")
        self.dataValue_18.config(text="")
        self.mode = 0

        def combobox_response(*args):
            combobox_select_str = self.model_choose_combobox.get()
            combobox_select_index = self.model_choose_combobox.current()
            nodes = []
            if combobox_select_index == 0:
                nodes = [x[0] for x in self.Graph.degree(self.mode)]
            elif combobox_select_index == 1:
                nodes = [x[0] for x in self.Graph.degree_centrality(self.mode)]
            elif combobox_select_index == 2:
                nodes = [x[0] for x in self.Graph.betweeness(self.mode)]
            elif combobox_select_index == 3:
                nodes = [x[0] for x in self.Graph.closeness(self.mode)]
            elif combobox_select_index == 4:
                nodes = [x[0] for x in self.Graph.connect_nums(self.Graph.get_nodes())]
            self.data_choose_str.set(tuple(nodes))

        self.model_choose_combobox["value"] = ("度排序", "点度中心性排序","介数中心性排序", "接近中心性排序", "连接数排序")
        self.model_choose_combobox.current(0)
        self.model_choose_combobox.bind("<<ComboboxSelected>>", combobox_response)

    def social_graph(self):
        show_text = "准备分析社会网络"
        self.change_show_text(show_text)
        Social_network = social_network_graphs.GraphSql()
        Social_network.create_db()
        Social_network.clear_db()
        Social_network.write_db()
        self.Graph = social_network_graphs.Graph()
        self.Graph.create_undirect_whole_graph()
        nodes, graph_name = self.Graph.draw_all()
        show_text = "社会网络分析完成"
        self.change_show_text(show_text)
        width = int(self.maxWidth / 3)
        height = self.maxHeight - 120
        self.photo_main = self.Load_img(graph_name, width, height)
        self.label_image.config(image=self.photo_main)
        nodes = [x[0] for x in self.Graph.degree(self.mode)]
        self.data_choose_str.set(tuple(nodes))

    def app_classify_entrance(self):
        if self.load_in_flag == 0:
            messagebox.showinfo("提示", "尚未导入数据")
            return
        self.app_classify_init()
        self.app_classify_graph()

    def app_classify_init(self):
        self.model = 2
        self.dataLabel_1.config(text="包总数")
        self.dataValue_1.config(text="")
        self.dataLabel_2.config(text="Web流量数")
        self.dataValue_2.config(text="")
        self.dataLabel_3.config(text="浏览器下载流量数")
        self.dataValue_3.config(text="")
        self.dataLabel_4.config(text="QQ流量数")
        self.dataValue_4.config(text="")
        self.dataLabel_5.config(text="微信流量数")
        self.dataValue_5.config(text="")
        self.dataLabel_6.config(text="迅雷流量数")
        self.dataValue_6.config(text="")
        self.dataLabel_7.config(text="")
        self.dataValue_7.config(text="")
        self.dataLabel_8.config(text="")
        self.dataValue_8.config(text="")
        self.dataLabel_9.config(text="")
        self.dataValue_9.config(text="")
        self.dataLabel_10.config(text="包含应用数")
        self.dataValue_10.config(text="")
        self.dataLabel_11.config(text="Web流量大小(B)")
        self.dataValue_11.config(text="")
        self.dataLabel_12.config(text="浏览器下载流量大小(B)")
        self.dataValue_12.config(text="")
        self.dataLabel_13.config(text="QQ流量大小(B)")
        self.dataValue_13.config(text="")
        self.dataLabel_14.config(text="微信流量大小(B)")
        self.dataValue_14.config(text="")
        self.dataLabel_15.config(text="迅雷流量大小(B)")
        self.dataValue_15.config(text="")
        self.dataLabel_16.config(text="")
        self.dataValue_16.config(text="")
        self.dataLabel_17.config(text="")
        self.dataValue_17.config(text="")
        self.dataLabel_18.config(text="")
        self.dataValue_18.config(text="")
        self.data_choose_str.set((None,))
        show_text = "准备分析应用流量"
        self.change_show_text(show_text)
        self.APP_list, self.APP_length_list = SVM_test.only_for_test()
        sum = 0
        sum_length = 0
        kind = 0
        self.APP_proportion = []
        self.APP_length_proportion = []
        for i in range(5):
            sum += self.APP_list[i]
            if self.APP_list[i] != 0:
                kind += 1
            sum_length += self.APP_length_list[i]
        for APP in self.APP_list:
            temp = round(APP/sum*100, 2)
            self.APP_proportion.append(temp)
        for APP in self.APP_length_list:
            temp = round(APP/sum_length*100, 2)
            self.APP_length_proportion.append(temp)
        print(self.APP_proportion)
        print(self.APP_length_proportion)
        app_data = [sum, self.APP_list[0], self.APP_list[1], self.APP_list[2], self.APP_list[3], self.APP_list[4],
                    kind, self.APP_length_list[0], self.APP_length_list[1], self.APP_length_list[2],
                    self.APP_length_list[3], self.APP_length_list[4]]
        self.app_data_table(app_data)

        def combobox_response(*args):
            combobox_select_str = self.model_choose_combobox.get()
            combobox_select_index = self.model_choose_combobox.current()
            width = int(self.maxWidth / 3)
            height = int((self.maxHeight / 2) - 45)
            if self.load_in_flag != 0:
                if combobox_select_index == 0:
                    labels = [u'Web', u'Download', u'QQ', u'Wechat', u'Thunder']
                    statistic_analysis.draw_pie(self.APP_proportion, labels, "APP")
                    self.photo_main = self.Load_img('app_pie.png', width, height)
                    self.label_image.config(image=self.photo_main)
                elif combobox_select_index == 1:
                    labels = [u'Web', u'Download', u'QQ', u'Wechat', u'Thunder']
                    statistic_analysis.draw_bar(self.APP_list, labels, "APP")
                    self.photo_main = self.Load_img('app_bar.png', width, height)
                    self.label_image.config(image=self.photo_main)
                if combobox_select_index == 2:
                    labels = [u'Web', u'Download', u'QQ', u'Wechat', u'Thunder']
                    statistic_analysis.draw_pie(self.APP_length_proportion, labels, "APP_length")
                    self.photo_main = self.Load_img('app_length_pie.png', width, height)
                    self.label_image.config(image=self.photo_main)
                elif combobox_select_index == 3:
                    labels = [u'Web', u'Download', u'QQ', u'Wechat', u'Thunder']
                    statistic_analysis.draw_bar(self.APP_length_list, labels, "APP_length")
                    self.photo_main = self.Load_img('app_length_bar.png', width, height)
                    self.label_image.config(image=self.photo_main)
            else:
                messagebox.showinfo("提示：", "未导入数据")

        self.model_choose_combobox["value"] = ("APP分布饼图", "APP分布柱状图", "APP大小分布饼图", "APP大小分布柱状图")
        self.model_choose_combobox.current(0)
        self.model_choose_combobox.bind("<<ComboboxSelected>>", combobox_response)

    def app_classify_graph(self):
        show_text = "应用流量分析完成"
        self.change_show_text(show_text)
        width = int(self.maxWidth / 3)
        height = int((self.maxHeight / 2) - 45)
        labels = [u'Web', u'Download', u'QQ', u'Wechat', u'Thunder']
        statistic_analysis.draw_pie(self.APP_proportion, labels, "APP")
        self.photo_main = self.Load_img('app_pie.png', width, height)
        self.label_image.config(image=self.photo_main)

    def app_data_table(self, datas):
        self.dataValue_1.config(text=str(datas[0]))
        self.dataValue_2.config(text=str(datas[1]))
        self.dataValue_3.config(text=str(datas[2]))
        self.dataValue_4.config(text=str(datas[3]))
        self.dataValue_5.config(text=str(datas[4]))
        self.dataValue_6.config(text=str(datas[5]))
        self.dataValue_10.config(text=str(datas[6]))
        self.dataValue_11.config(text=str(datas[7]))
        self.dataValue_12.config(text=str(datas[8]))
        self.dataValue_13.config(text=str(datas[9]))
        self.dataValue_14.config(text=str(datas[10]))
        self.dataValue_15.config(text=str(datas[11]))


    def listbox_msg(self,*args):
        try:
            string = str(self.data_choose_listbox.get(self.data_choose_listbox.curselection()[0]))
            #取列表框中的字符串,.curselection返回的是(索引,)
            for IP in self.Graph.node_details:
                if operator.eq(string, IP[1]) == True:
                    self.dataValue_1.config(text=IP[1])
                    self.dataValue_2.config(text=IP[2])
                    self.dataValue_3.config(text=IP[3])
                    self.dataValue_4.config(text=IP[4])
                    self.dataValue_5.config(text=IP[5])
                    self.dataValue_6.config(text=IP[6])
        except:
            print("列表框无数据")

    def listbox_double(self,*args):
        print(str(self.data_choose_listbox.get(self.data_choose_listbox.curselection()[0])))



    def setup_config(self):
        # 接收弹窗的数据
        res = self.ask_userinfo()
        if res is None:
            return
        self.packet_load_num = int(res[0])
        show_text = "修改设置：最大包读取数 = " + res[0]
        self.change_show_text(show_text)

    def ask_userinfo(self):
        inputDialog = MySetting()
        self.root.wait_window(inputDialog)  # 这一句很重要！！！
        return inputDialog.userinfo

    def copy_right_inform(self):
        messagebox.showinfo("关于", "软件名称：基于Python的互联网数据分析与可视化展示系统\n作者：于俊杰\n版本号:0.3.4")

    def resize(self,w_box, h_box, pil_image):  # 参数是：要适应的窗口宽、高、Image.open后的图片
        w, h = pil_image.size  # 获取图像的原始大小
        f1 = 1.0 * w_box / w
        f2 = 1.0 * h_box / h
        factor = min([f1, f2])
        width = int(w * factor)
        height = int(1.5*h * factor)
        return pil_image.resize((width, height), Image.ANTIALIAS)

    def Load_img(self,name, weight, height):
        self.img = Image.open(name)  # 打开图片
        w_box = weight    #我也不知道这干啥的,似乎是设置GUI的当前大小,因为这个函数的作用之一是根据GUI大小调整图片大小
        h_box = height
        img_resized = self.resize(w_box, h_box, self.img)  # 缩放图像让它保持比例，同时限制在一个矩形框范围内  【调用函数，返回整改后的图片】
        photo = ImageTk.PhotoImage(img_resized)  # 用PIL模块的PhotoImage打开.因为tkinter无法直接打开png格式的图
        return photo

    def change_show_text(self, string):
        self.show_text.config(state="normal")
        self.show_text.insert(END, string+"\n")
        self.show_text.config(state="disable")

    def Mainloop(self):
        self.root.mainloop()


class MySetting(Toplevel):
    def __init__(self):
        super().__init__()
        self.title('设置用户信息')
        # 弹窗界面
        self.setup_UI()

    def setup_UI(self):
        # 第一行（两列）
        row1 = Frame(self)
        row1.pack(fill="x")
        Label(row1, text='读取最大包数：', width=14).pack(side=LEFT)
        self.number = StringVar(value="1000")
        Entry(row1, textvariable=self.number, width=14).pack(side=LEFT)
        # 第二行
        #row2 = Frame(self)
        #row2.pack(fill="x", ipadx=1, ipady=1)
        #Label(row2, text='年龄：', width=8).pack(side=LEFT)
        #self.age = IntVar()
        #Entry(row2, textvariable=self.age, width=20).pack(side=LEFT)
        # 第三行
        row3 = Frame(self)
        row3.pack(fill="x")
        Button(row3, text="取消", command=self.cancel).pack(side=RIGHT)
        Button(row3, text="确定", command=self.ok).pack(side=RIGHT)

    def ok(self):
        number = int(self.number.get())
        if number<1 or number>10000:
            messagebox.showinfo("提示：", "请输入1-10000的数字")
            self.userinfo = ["1000"]
        else:
            self.userinfo = [self.number.get()] # 设置数据
        self.number = self.userinfo[0]
        self.destroy()# 销毁窗口

    def cancel(self):
        self.userinfo = None # 空！
        self.destroy()


if __name__ == '__main__':
    app =GUI_main()
    app.Mainloop()