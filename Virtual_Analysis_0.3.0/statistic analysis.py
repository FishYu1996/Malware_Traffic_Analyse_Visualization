# coding=UTF-8
import db_helper


def statistic_analysis_entrance():
    print("statistic analysis start")
    packet_num_dict = get_packet_num()
    tcp_flow_num_dict = get_tcp_flow()
    duration = get_time_duration()

    all_packet_num = packet_num_dict["packets"]
    tcp_packet_num = packet_num_dict["tcp_packets"]
    udp_packet_num = packet_num_dict["udp_packets"]
    http_packet_num = packet_num_dict["http_packets"]
    https_packet_num = packet_num_dict["https_packets"]
    dns_packet_num = packet_num_dict["dns_packets"]

    average_len = int(get_average_num())

    ip_num_dict = get_ip_num_dict()
    ip_kind_num = ip_num_dict.keys().__len__()
    ip_connect_num = get_ip_connect_dict()
    ip_connect_kind_num = ip_connect_num.keys().__len__()
    tcp_flow_num = tcp_flow_num_dict.keys().__len__()

    pps = packet_per_second(duration, all_packet_num)
    tcp_proportion = get_proportion(all_packet_num, tcp_packet_num)
    dns_proportion = get_proportion(all_packet_num, dns_packet_num)
    http_proportion = get_proportion(all_packet_num, http_packet_num)
    https_proportion = get_proportion(all_packet_num, https_packet_num)

    length_distribution = get_length_distribution(all_packet_num)

    print(duration)
    print("-----------------------")
    print(all_packet_num)
    print(tcp_packet_num)
    print(udp_packet_num)
    print(http_packet_num)
    print(https_packet_num)
    print(dns_packet_num)
    print("-----------------------")
    print(average_len)
    print(ip_kind_num)
    print(ip_connect_kind_num)
    print(tcp_flow_num)
    print("-----------------------")
    print(pps)
    print(tcp_proportion)
    print(dns_proportion)
    print(http_proportion)
    print(https_proportion)
    print("-----------------------")
    print(length_distribution)



def get_time_duration():
    sql = "select Second from basic_part_data limit 1"
    start_time = db_helper.get_data(sql)[0][0]
    sql = "select Second from basic_part_data order by Second desc limit 1"
    end_time = db_helper.get_data(sql)[0][0]
    duration = end_time - start_time
    return duration


def get_average_num():
    sql = "select AVG(Len) from basic_part_data"
    average_len = db_helper.get_data(sql)[0][0]
    return average_len


def get_ip_num_dict():
    ip_num_dict = {}
    sql = "Select Distinct Src_IP, Count(*) From basic_part_data Group by Src_IP"
    results = db_helper.get_data(sql)
    results = list(results)
    for result in results:
        ip_num_dict[result[0]] = result[1]
    sql = "Select Distinct Dst_IP, Count(*) From basic_part_data Group by Dst_IP"
    results = db_helper.get_data(sql)
    results = list(results)
    dict_keys = ip_num_dict.keys()
    for result in results:
        if result[0] in dict_keys:
            ip_num_dict[result[0]] = ip_num_dict.get(result[0]) + result[1]
        else:
            ip_num_dict[result[0]] = result[1]
    return ip_num_dict


def get_ip_connect_dict():
    sql = "Select Distinct Src_IP,Dst_IP, Count(*) From basic_part_data Group by Src_IP,Dst_IP"
    ip_connect_dict = {}
    results = db_helper.get_data(sql)
    results = list(results)
    for result in results:
        connection_pair = (result[0],result[1])
        ip_connect_dict[connection_pair] = result[2]
    return ip_connect_dict


def get_packet_num():
    db_names = ["basic_part_data", "tcp_part_data", "udp_part_data", "http_part_data", "https_part_data",
                "dns_part_data"]
    strs = ["packets", "tcp_packets", "udp_packets", "http_packets", "https_packets", "dns_packets"]
    i = 0
    packet_nums = {}
    for db_name in db_names:
        sql = "SELECT COUNT(*) FROM " + db_name
        result = db_helper.get_data(sql)[0][0]
        packet_nums[strs[i]] = result
        i += 1
    return packet_nums


def packet_per_second(second, packets):
    return round(packets/second,3)


def get_tcp_flow():
    sql = "SELECT DISTINCT Src_IP,Dst_IP,Src_port,Dst_port,Protocol,COUNT(*)FROM basic_part_data basic, " \
          "tcp_part_data tcp  where  basic.Id = tcp.Id Group by Src_IP,Dst_IP,Src_port,Dst_port,Protocol"
    results = db_helper.get_data(sql)
    results = list(results)
    tcp_flow_dict = {}
    for result in results:
        exist_keys = tcp_flow_dict.keys()
        temp_key = (result[0], result[1], result[2], result[3], result[4])
        symmetrical_temp_key = (result[1], result[0], result[3], result[2], result[4])
        if temp_key in exist_keys:
            tcp_flow_dict[temp_key] = tcp_flow_dict[temp_key] + result[5]
        elif symmetrical_temp_key in exist_keys:
            tcp_flow_dict[symmetrical_temp_key] = tcp_flow_dict[symmetrical_temp_key] + result[5]
        else:
            tcp_flow_dict[temp_key] = result[5]
    return tcp_flow_dict


def get_proportion(total, sub):
    return round(sub/total * 100, 2)


def get_length_distribution(total):
    min = 0
    max = 200
    distribution_list = []
    while max < 1601:
        sql = "Select COUNT(*) FROM basic_part_data where Len> " + str(min) + " and Len < " + str(max)
        result = db_helper.get_data(sql)[0][0]
        result = round(result/total * 100, 2)
        distribution_list.append(result)
        min += 200
        max += 200
    return distribution_list



if __name__ == '__main__':
     statistic_analysis_entrance()