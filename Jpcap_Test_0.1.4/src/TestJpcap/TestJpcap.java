package TestJpcap;
import java.io.File;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFrame;

import jpcap.JpcapCaptor;
import jpcap.NetworkInterface;
import jpcap.NetworkInterfaceAddress;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;
import jpcap.packet.TCPPacket;
import jpcap.packet.UDPPacket;
import java.awt.GridLayout;


public class TestJpcap {
    public static void main(String[] args) throws IOException {
      Scanner console = new Scanner(System.in);   
      System.out.println("请输入文件名");
      String name = console.nextLine();//获取用户要打开的文件名
      String filename = name+(".pcap");//获取用户读包名字
      oneByOneReader(filename);//调用读包方法
      /**
      JFrame frame=new JFrame("Java数据统计图");
      frame.setLayout(new GridLayout(2,2,10,10));
      frame.add(new TimeSeriesChart().getChartPanel());    //添加折线图
  	  frame.setBounds(50, 50, 800, 600);
  	  frame.setVisible(true);
  	  **/
    }

    public static void oneByOneReader(String filename) throws IOException {
    	DataBaseTest DB=new DataBaseTest();
        JpcapCaptor captor = JpcapCaptor.openFile(filename);
        //PrintWriter pw = new PrintWriter(new FileWriter(new File("packets.csv")));
        // 设置过滤器
        captor.setFilter("ip", true);
        int counter = 0;
    	DB.LinkDB();
    	int testi=0;
        while(testi<0){
        Packet packet;
        packet = captor.getPacket();
        System.out.println(packet);
        if (packet != null) {
          //DB.InsertData(packet);
          //System.out.println(counter);
          counter++;
        }
        else
          break;
        if (packet instanceof TCPPacket){
            TCPPacket tcppacket=(TCPPacket)packet;
            System.out.println("数据部分");
            String endflag="    ";
            for(int i=0;i<tcppacket.data.length;i++){
      	     System.out.print((char)tcppacket.data[i]);
      	     endflag=endflag+(char)tcppacket.data[i];
      	     endflag=endflag.substring(endflag.length()-4, endflag.length());
      	     if(endflag.equals("\r\n\r\n")){
      	       	System.out.println("http end*******************");
      	       	break;
      	     }
            }
            System.out.println();
        }
        else if(packet instanceof UDPPacket)
        {
        	UDPPacket udppacket=(UDPPacket)packet;
        	String Hex=null;
        	byte b;
        	int data;
        	int j=0;
        	int answerflag=0;
        	int answerrecord=0;
        	int answerstart=0;
        	int answerIp[]=new int[4];
        	int endflag[]=new int[2];
            System.out.println("数据部分");
            for(int i=0;i<2;i++){
              b=udppacket.data[i];
              data=Byte.toUnsignedInt(b);//有符号数转换为无符号数
              Hex=Integer.toHexString(data);
              System.out.print(Hex);
            }
            System.out.println();
            for(int i=2;i<4;i++){
              b=udppacket.data[i];
              data=Byte.toUnsignedInt(b);
              Hex=Integer.toHexString(data);
              if(Hex.equals("81"))
            	 answerflag=1;
              System.out.print(Hex);
            }
            System.out.println();
            for(int i=12;i<udppacket.data.length;i++){
              b=udppacket.data[i];
              data=Byte.toUnsignedInt(b);
              if(answerflag==1){            
                endflag[0]=endflag[1];
                endflag[1]=data;
             	if(endflag[0]==192&&endflag[1]==12){//DNS回答地址前会有c0 0c标识码（后跟回答的dns域名）  
                  answerrecord=11;
                  answerflag=0;
             	}
              }
              if(answerstart==1){
              	answerIp[j]=data;
              	j++;
              	if(j==4){
              	  answerstart=-1;
              	}
              }
              if(answerrecord!=0){
            	answerrecord--;
            	if(answerrecord==0){
            	  answerstart=1;
            	}
              }
              if(data==3)
            	System.out.print(".");
              else if((data>47&&data<58)||(data>64&&data<123))
            	System.out.print((char)udppacket.data[i]);
              if(answerstart==-1){
            	System.out.println();
            	for(j=0;j<4;j++){
            	  System.out.print(answerIp[j]);
            	  if(j<3)
            	    System.out.print(".");
            	}
              }
            }
            System.out.println();
        }
        testi++;
        }
        DB.CloseConn();
        StatisticsPackets SP=new StatisticsPackets();
        SP.AnalysisEntry();
        SP.CloseConn();
        System.out.println("PacketNumbers:" + counter);
    }
}
