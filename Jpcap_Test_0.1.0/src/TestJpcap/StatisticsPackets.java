package TestJpcap;
import jpcap.JpcapCaptor;
import jpcap.NetworkInterface;
import jpcap.NetworkInterfaceAddress;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StatisticsPackets {
	Statement stmt ; 
	Connection conn;
	String sql;
	String[] srcIps;
	int[] PacketNumber;
	String[] Links;
	int[] LinkNumber;
	HashMap<String,Integer> PacketCounter;
	HashMap<String,Integer> LinkCounter;
	public StatisticsPackets() {
		PacketCounter=new HashMap<String,Integer>();
		LinkCounter=new HashMap<String,Integer>();
	}
	public void AnalysisEntry(){
		ReadData();
		SavingIps();
		SavingIptoIp();
		Menu();
	}
	public void LinkDB(){
		try {  
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();  
  
            String databaseName = "test";// 已经在MySQL数据库中创建好的数据库。  
            String userName = "root";// MySQL默认的root账户名  
            String password = "root";// 默认的root账户密码为空  
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + databaseName+"?useSSL=false&serverTimezone=UTC", userName, password);          
            stmt = conn.createStatement();
            if(conn!=null)
             System.out.println("连接数据库成功！");
            else
             System.out.println("连接数据库失败！");
		 } catch (Exception e) {  
	            e.printStackTrace();  
	     }  
	}
    public void ReadData(){
      LinkDB();
      sql="SELECT srcIp ,COUNT(*) FROM `data` GROUP BY srcIp";
      try {
		ResultSet rs=stmt.executeQuery(sql);
		while(rs.next()){
          PacketCounter.put(rs.getString(1), rs.getInt(2));
		}
		sql="SELECT srcIp,dscIp FROM `data`";
		rs=stmt.executeQuery(sql);
		while(rs.next()){
		  String[] IPadder=new String[2];
		  IPadder[0]=rs.getString(1)+"->"+rs.getString(2);
		  IPadder[1]=rs.getString(2)+"->"+rs.getString(1);
		  if (LinkCounter.containsKey(IPadder[0])) {
	        int value = LinkCounter.get(IPadder[0]);
	        LinkCounter.put(IPadder[0],  value+1);
		  }else if(LinkCounter.containsKey(IPadder[1])){
			int value = LinkCounter.get(IPadder[1]);
            LinkCounter.put(IPadder[1],  value+1);   
		  }
		   else {
			LinkCounter.put(IPadder[0], 1);
	      }
		}
      } catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
     }
   }
   public void Menu(){
	 int i=0;
	 int[] functionNumber;
	 Scanner console = new Scanner(System.in);   
	 while(true){
	  System.out.println("-----我是菜单一------");
	  System.out.println("1.基于IP单点分析");
	  System.out.println("2.基于IP对分析");
	  System.out.println("请输入参数,输入r退出");
	  String menuPara = console.nextLine();//获取用户要打开的菜单
	  if(menuPara.equals("r"))
		break;
	  else if(menuPara.equals("1"))
	    PacketMenu();
	  else if(menuPara.equals("2"))
		LinkMenu();  
	  }
	  
   }
   public void SavingIps(){
	   Iterator it = PacketCounter.keySet().iterator();
	   srcIps=new String[PacketCounter.size()];
	   PacketNumber=new int[PacketCounter.size()];
	   int i=0;
       while (it.hasNext()) {
           srcIps[i] = (String)it.next();
           PacketNumber[i] = PacketCounter.get(srcIps[i]);
           i++;  
       }
   }
   public void SavingIptoIp(){
	 Iterator it = LinkCounter.keySet().iterator();
	 Links=new String[LinkCounter.size()];
	 LinkNumber=new int[LinkCounter.size()];
	 int i=0;
     while (it.hasNext()) {
       Links[i] = (String)it.next();
       LinkNumber[i] = LinkCounter.get(Links[i]);
       i++;  
     } 
   }
   public void PacketMenu(){
	 int i=0; 
	 int menuNumber=1;
	 Scanner console = new Scanner(System.in);   
	 System.out.println("以下为流量涉及的所有IP地址");
	 while(i<srcIps.length){
	   System.out.println(menuNumber+".  "+srcIps[i]+"     "+PacketNumber[i]+"个包");
	   i++;
	   menuNumber++;
	 }
	 System.out.println("请输入参数,输入r退出");
	 String menuPara = console.nextLine();//获取用户要打开的菜单
	 if(menuPara.equals("r"))
	   return;
	 int menuParaNum=-1;
	 try {
	   menuParaNum = Integer.parseInt(menuPara);
	 } catch (NumberFormatException e) {
	   e.printStackTrace();
	 }
	 if(menuParaNum==-1)
	   return;
	 else
	   PacketAnalyser(menuParaNum);
   }
   public void LinkMenu(){
	 int i=0; 
	 int menuNumber=1;
     Scanner console = new Scanner(System.in);   
	 System.out.println("以下为流量涉及的所有IP地址对");
	 while(i<Links.length){
	   System.out.println(menuNumber+".  "+Links[i]+"     "+LinkNumber[i]+"个包");
	   i++;
	   menuNumber++;
	 }
	 System.out.println("请输入参数,输入r退出");
	 String menuPara = console.nextLine();//获取用户要打开的菜单
	 if(menuPara.equals("r"))
	   return;
	 try {
	   int menuParaNum = Integer.parseInt(menuPara);
	 } catch (NumberFormatException e) {
       e.printStackTrace();
	 }
   }
   
   public void PacketAnalyser(int Packetid){
	   System.out.println("当前分析的是IP  "+srcIps[Packetid]);
	   PacketLength(Packetid);
	   PacketProtocol(Packetid);
	   PacketPort(Packetid);
   }
   
   public void PacketLength(int Packetid){
	 int[] LengthLimit=new int[2];
	 LengthLimit[0]=0;
	 LengthLimit[1]=300;
	 float PacketLength=0;
	 float MatchingProp=0;
	 System.out.println("--------------------------------包大小分析---------------------------------------");
	 System.out.println("源地址                    数据包数量          平均大小          小型数据包(<300字节)占比");
	 sql="SELECT length FROM `data` where srcIp='"+srcIps[Packetid]+"'";
	 try {
      int matching=0;
      int sumlength=0;
      ResultSet rs=stmt.executeQuery(sql);
	  while(rs.next()){
		if(rs.getInt(1)>=LengthLimit[0]&&rs.getInt(1)<=LengthLimit[1])
		  matching++;
		sumlength+=rs.getInt(1);
	  }
		 PacketLength=(float)sumlength/PacketNumber[Packetid];
		 MatchingProp=(float)matching/PacketNumber[Packetid];
	   } catch (SQLException e) {
		 e.printStackTrace();
	   } 
    System.out.println(srcIps[Packetid]+"     "+PacketNumber[Packetid]+"           "+PacketLength+"            "+MatchingProp);
    System.out.println("目的地址                    数据包数量          平均大小          小型数据包(<300字节)占比");
	 sql="SELECT length FROM `data` where dscIp='"+srcIps[Packetid]+"'";
	 try {
     int matching=0;
     int sumlength=0;
     ResultSet rs=stmt.executeQuery(sql);
	  while(rs.next()){
		if(rs.getInt(1)>=LengthLimit[0]&&rs.getInt(1)<=LengthLimit[1])
		  matching++;
		sumlength+=rs.getInt(1);
	  }
		 PacketLength=(float)sumlength/PacketNumber[Packetid];
		 MatchingProp=(float)matching/PacketNumber[Packetid];
	   } catch (SQLException e) {
		 e.printStackTrace();
	   } 
   System.out.println(srcIps[Packetid]+"     "+PacketNumber[Packetid]+"           "+PacketLength+"            "+MatchingProp);
   
  }
   public void PacketProtocol(int Packetid){
	  System.out.println("--------------------------------协议分析---------------------------------------");
	  System.out.println("(IP下)应用层协议号                                  数量");
	  sql="SELECT protocol ,COUNT(*) FROM `data`WHERE srcIp='"+srcIps[Packetid]+"'OR dscIp='"+srcIps[Packetid]+"' GROUP BY protocol";
	  try {
		ResultSet rs=stmt.executeQuery(sql);
		while(rs.next()){
		  System.out.println("   "+rs.getString(1)+"                               "+rs.getInt(2));
		}
	  } catch (SQLException e) {
		e.printStackTrace();
	  }      
 }
   public void PacketPort(int Packetid){
		  System.out.println("--------------------------------端口分析---------------------------------------");
		  System.out.println("发送端口号                                  数量");
		  sql="SELECT srcPort ,COUNT(*) FROM `data`WHERE srcIp='"+srcIps[Packetid]+"' GROUP BY srcPort";
		  try {
			ResultSet rs=stmt.executeQuery(sql);
			while(rs.next()){
			  System.out.println("   "+rs.getString(1)+"                    "+rs.getInt(2));
			}
		  } catch (SQLException e) {
			e.printStackTrace();
		  } 
		  System.out.println("接收端口号                                  数量");
		  sql="SELECT dscPort ,COUNT(*) FROM `data`WHERE dscIp='"+srcIps[Packetid]+"' GROUP BY dscPort";
		  try {
			ResultSet rs=stmt.executeQuery(sql);
			while(rs.next()){
			  System.out.println("   "+rs.getString(1)+"                    "+rs.getInt(2));
			}
		  } catch (SQLException e) {
			e.printStackTrace();
		  }    
	 }
   /**
   public void PacketPort(){
	  int i=0;
	  int j=0;
	  String tempString;
	  int value;
	  HashMap<String,Integer> PacketPort;
	  PacketPort=new HashMap<String,Integer>();
	  String[] protocol;
	  System.out.println("--------------------------------通信端口分析---------------------------------------");
	  while(i<srcIps.length){
		 System.out.println("源地址 "+srcIps[i]);
		 Protocol(srcIps[i]);
		 protocol=new String[Protocol.size()];
		 Iterator it2 = Protocol.keySet().iterator();
 	     j=0;
   	     while (it2.hasNext()) { 	
   	       protocol[j] = (String)it2.next();
   	       j++;
   	     }
   	     j=0;
         while(j<Protocol.size()){
		      try {
		       sql="SELECT srcPort,dscPort FROM `data` where srcIp='"+srcIps[i]+"'AND protocol="+protocol[j];
			   ResultSet rs=stmt.executeQuery(sql);
			    while(rs.next()){
				   tempString=rs.getString(1)+" > "+rs.getString(2);
				   if (PacketPort.containsKey(tempString)){
			         value = PacketPort.get(tempString);
			         PacketPort.put(tempString,  value+1);
			       } 
			  	   else {
			         PacketPort.put(tempString, 1);
			       }
			    }
		      } catch (SQLException e) {
			    e.printStackTrace();
		      }
		      System.out.println("      应用层协议号   "+protocol[j]+" :");
		      System.out.println("      源端口 > 目的端口        数量");
			  Iterator it = PacketPort.keySet().iterator();
		      while (it.hasNext()) {
		        String PTP = (String)it.next();
		        int number = PacketPort.get(PTP);
		        System.out.println("     "+PTP+"      "+number);
		      }
		      System.out.println(); 
		      PacketPort.clear();
		      j++;
        }
		    Protocol.clear();
		    i++;
	 }		    
   }
   **/

   public void CloseConn(){
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
	}
}
