package TestJpcap;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import jpcap.JpcapCaptor;
import jpcap.NetworkInterface;
import jpcap.NetworkInterfaceAddress;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;
import jpcap.packet.TCPPacket;
import jpcap.packet.UDPPacket;

import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;  
  
public class DataBaseTest {
	Statement stmt ; 
	Connection conn;
	public DataBaseTest() {
	}
	public void LinkDB(){
		try {  
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();  
  
            String databaseName = "test";// 已经在MySQL数据库中创建好的数据库。  
            String userName = "root";// MySQL默认的root账户名  
            String password = "root";// 默认的root账户密码为空  
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + databaseName+"?useSSL=false&serverTimezone=UTC", userName, password);          
            stmt = conn.createStatement();
            if(conn!=null)
             System.out.println("连接数据库成功！");
            else
             System.out.println("连接数据库失败！");
		 } catch (Exception e) {  
	            e.printStackTrace();  
	     }  
	}
	public void InsertData(Packet packet){//写数据库前各项目分离
		Packet temppacket=packet;
		IPPacket Ipacket =(IPPacket)temppacket;
	    long[] time=new long[2];
	    InetAddress[] ip=new InetAddress[2];
	    short protocol;
	    int length;
	    int ident;
	    int srcPort;
		int dscPort;
	    String appProto;
	    
	    time[0]=Ipacket.sec;
	    time[1]=Ipacket.usec;
	    
	    ip[0]=Ipacket.src_ip;
        ip[1]=Ipacket.dst_ip;
        protocol=Ipacket.protocol;
	    length=Ipacket.len;
	    ident=Ipacket.ident;
	    
	    srcPort=-1;
		dscPort=-1;
		
	    if(protocol==6){
	      TCPPacket tpacket=(TCPPacket)Ipacket;
	      srcPort=tpacket.src_port;
	      dscPort=tpacket.dst_port;
	    }
	    else if(protocol==17){
	      UDPPacket tpacket=(UDPPacket)Ipacket;
	      srcPort=tpacket.src_port;
	      dscPort=tpacket.dst_port;
	    }
	    appProto=GetAppProtocol(temppacket,srcPort,dscPort);
	    String sql;   
	    try {  
            int result;
                sql = "INSERT INTO data(time,mstime,srcIp,dscIp,protocol,length,srcPort,dscPort,appProto) VALUES("+time[0]+","+time[1]+",'"+ip[0]+"','"+ip[1]+"',"+protocol+","+length+","+srcPort+","+dscPort+",'"+appProto+"')";  
                //System.out.println(sql);
                result = stmt.executeUpdate(sql);        
        } catch (Exception e) {  
            e.printStackTrace();  
        }
	}

	public String GetAppProtocol(Packet packet,int srcPort,int dscPort){
		String appProtocol=null;
		if (packet instanceof TCPPacket){
            TCPPacket tcppacket=(TCPPacket)packet;
            //System.out.println("数据部分");
            String endflag="    ";
            for(int i=0;i<tcppacket.data.length;i++){
      	     //System.out.print((char)tcppacket.data[i]);
      	     endflag=endflag+(char)tcppacket.data[i];
      	     endflag=endflag.substring(endflag.length()-4, endflag.length());
      	     if(endflag.equals("\r\n\r\n")&&((srcPort==80)||dscPort==80)){
      	    	appProtocol="HTTP";
      	       	break;
      	     }
            }
        }
        else if(packet instanceof UDPPacket)
        {
         if((srcPort==53)||(dscPort==53)){
           appProtocol="DNS";
         }
        }
		return appProtocol;
	}
	public void CloseConn(){
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
	}
}
