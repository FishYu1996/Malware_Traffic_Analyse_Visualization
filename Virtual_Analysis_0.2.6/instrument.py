# coding=UTF-8
import Draw_Graph
import operator
import Analyser

#一堆不知道放哪里的工具函数

#将IP对表示的边拼接成字符串形式的边表示形式.输入元组列表,返回字符串列表
def change_IPs_to_Links_str(tuple_list):
    Link_string_list=[]
    for tuple in tuple_list:
        Link_string=tuple[0]+"->"+tuple[1]
        Link_string_list.append(Link_string)
    return Link_string_list


#将两个list拼接整合成字典,一一对应,只要是两个list就行,不对其list内部形式有要求,不要被形参名字影响了
def change_list_to_dict(tuple_list,data_list):
    dict={}
    i=0;
    while i < len(tuple_list):
        dict[tuple_list[i]]=data_list[i]
        i+=1
    return dict


#将异常IP详细字典转化为元组列表.输入为异常IP字典和要从字典中取的key-option.输出元组列表
def change_abnormal_dict_to_tuplelist(dict,option):
    tuplelist=[]
    for key in dict.keys():
        tuple=(key,dict[key][option])
        tuplelist.append(tuple)
    order_tuplelist = sorted(tuplelist, key=lambda x: x[1], reverse=True)
    return order_tuplelist


#生成异常IP详细字典,输入图类和异常IP列表,返回异常IP详细字典
def create_abnormal_IPs_dict(graphs,IPs_list):
    abnormal_IPs_detail={}  #单个IP的字典
    abnormal_IPs_detail_dict={}  #字典的字典
    mode = 0  #nx三大指标基于G
    for IP in IPs_list:
        IPs = graphs.degree(mode)
        for IP_degree in IPs:
            if operator.eq(IP, IP_degree[0]) == True:
                abnormal_IPs_detail["degree"]=IP_degree[1]
                break
        IPs = graphs.betweeness(mode)
        for IP_betweeness in IPs:
            if operator.eq(IP, IP_betweeness[0]) == True:
               abnormal_IPs_detail["betweeness"]=round(IP_betweeness[1], 5)
               break
        IPs = graphs.degree_centrality(mode)
        for IP_centrality in IPs:
            if operator.eq(IP, IP_centrality[0]) == True:
                abnormal_IPs_detail["centrality"]=round(IP_centrality[1], 5)
                break
        IP_list = []
        IP_list.append(IP)
        #写两个统计分析数据,由于Analyser相关函数需要输入列表,因此以IP_list输入
        abnormal_IPs_detail["link"]=Analyser.Node_Links_Analyse(IP_list)[0][1]
        abnormal_IPs_detail["length_prop"]=round(Analyser.Node_Length_Analyse(IP_list)[0][1], 5)
        #查询异常IP在数据库中相关特征的记录,并填充字典
        sql = "select has_dga,Necurs_FlawedAmy from abnormal_list where IP='" + IP + "'"
        results = Analyser.get_data(sql)
        if results[0][0] == 'YES':
            abnormal_IPs_detail["dga"] = 'Yes'
        else:
            abnormal_IPs_detail["dga"] = 'No'
        abnormal_IPs_detail["flawedAmy"]=results[0][1]
        #读取异常IP怀疑度
        abnormal_IPs_detail["suspicious_degree"]=Analyser.read_abnormal_IP_dict()[IP]
        #创建字典的字典,key是IP,value是字典
        abnormal_IPs_detail_dict[IP]=abnormal_IPs_detail.copy()
    return abnormal_IPs_detail_dict
