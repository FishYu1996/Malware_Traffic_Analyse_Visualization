# coding=UTF-8
import networkx as nx
import matplotlib.pyplot as plt
import MySQLdb
import math
import sys
import MySQLdb
import Analyser
G = nx.Graph()


def draw():                                      #建立一个空的无向图G
    global G,sql
    sql="select * from Link"
    results=Analyser.get_data(sql)
    i=0
    weight=[]
    for r in results:
        weight.append(math.sqrt(r[2]/10)+1)
        G.add_edge(r[0],r[1],weight=r[2])
        i=i+1
#elarge=[(u,v) for (u,v,d) in G.edges(data=True) if d['weight'] >100]
#esmall=[(u,v) for (u,v,d) in G.edges(data=True) if d['weight'] <=100]
    pos=nx.spring_layout(G,k=1) # positions for all nodes
#首先画出节点位置
# nodes
    nx.draw_networkx_nodes(G,pos,node_size=200)
#根据权重，实线为权值大的边，虚线为权值小的边
# edges
    nx.draw_networkx_edges(G,pos,width=weight)
#nx.draw_networkx_edge_labels(G,pos,font_size=12,font_family='sans-serif')
#nx.draw_networkx_edges(G,pos,edgelist=elarge,width=d['weight'])
#nx.draw_networkx_edges(G,pos,edgelist=esmall,width=d['weight'],alpha=0.5,edge_color='b',style='dashed')
    nx.draw_networkx_labels(G,pos,font_size=5,font_family='sans-serif')
    #print('点度中心性')
   # print(nx.degree_centrality(G))
    #print('介数中心性')
   # print(nx.betweenness_centrality(G))
   # print('点的度')
   # print(nx.degree(G))
    nodes = list(G.nodes)
    #test_list=list(G.nodes)
    plt.axis('off')
    plt.savefig("test.png")
    #print(nodes)
    #print(test_list)
    #print(nodes)
    #G.clear()
    plt.clf()
    return nodes

def draw_SingleIP(IP):
    global sql,G
    G.clear()
    sql="select * from Link where IP1='"+ IP +"'or IP2='"+IP+"'"
    results = Analyser.get_data(sql)
    i = 0
    weight = []
    for r in results:
        weight.append(math.sqrt(r[2] / 10) + 1)
        G.add_edge(r[0], r[1], weight=r[2])
        i = i + 1
    pos = nx.spring_layout(G, k=1)  # positions for all nodes
    nx.draw_networkx_nodes(G, pos, node_size=200)
    nx.draw_networkx_edges(G, pos, width=weight)
    nx.draw_networkx_labels(G, pos, font_size=5, font_family='sans-serif')
    nodes=list(G.nodes)
    plt.axis('off')
    plt.savefig("test.png")
    plt.clf()
    return nodes

def degree():
    degree_saves=nx.degree(G)
    order_degree_rank=sorted(degree_saves,key=lambda x:x[1],reverse=True)
    #cut_order_degree_rank=order_degree_rank[0:10]
    #print(cut_order_degree_rank)
    return order_degree_rank

def betweeness():
    betweeness_saves = nx.betweenness_centrality(G)
    order_betweeness_rank = sorted(betweeness_saves.items(), key=lambda x: x[1], reverse=True)
    #cut_order_betweeness_rank = order_betweeness_rank[0:10]
    #print(cut_order_betweeness_rank)
    return order_betweeness_rank

def degree_centrality():
    degree_centrality_saves = nx.degree_centrality(G)
    order_degree_centrality_rank = sorted(degree_centrality_saves.items(), key=lambda x: x[1], reverse=True)
    #cut_order_degree_centrality_rank = order_degree_centrality_rank[0:10]
    #print(cut_order_degree_centrality_rank)
    return order_degree_centrality_rank
#draw()
