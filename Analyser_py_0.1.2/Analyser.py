# coding=UTF-8
import MySQLdb

def get_data(sql):
    conn = MySQLdb.connect("localhost", "root", "root", "Test")
    cursor = conn.cursor()
    # 查询test表中id为11的记录，并将记录数目返回给count
    cursor.execute(sql)
    # 重置游标位置，0,为偏移量，mode＝absolute | relative,默认为relative,
    if(cursor.rowcount!=0):
        cursor.scroll(0, mode='absolute')
        results = cursor.fetchall()
    else:
        results=()
    conn.close()
    return results

def Node_Length_Analyse(nodes):
    max=200
    min=0
    prop=0
    all=0
    sum=0
    propdic={}
    for node in nodes:
        sql="SELECT length FROM `data` where srcIp='"+node+"'or dscIp='"+node+"'"
        results=get_data(sql)
        for result in results:
            all+=1
            if result[0]>min and result[0]<max:
                sum+=1
        prop=float(sum)/all
        propdic[node]=prop
        sum=0
        all=0
        ordered_propdic = sorted(propdic.items(), key=lambda x: x[1], reverse=True)
    return ordered_propdic

def Link_Small_Length_Analyse(IP1):
    max=200
    min=0
    sum=0
    small_package={}
    sql="SELECT dscIp,length FROM `data` where srcIp='"+IP1+"'"
    results=get_data(sql)
    for result in results:
        if result[1]>min and result[1]<max:
            if result[0] in small_package:
                sum=small_package[result[0]]
                small_package[result[0]]=sum+1
            else:
                small_package[result[0]]=1
    ordered_small_package = sorted(small_package.items(), key=lambda x: x[1], reverse=True)
    return ordered_small_package

def Link_Large_Length_Analyse(IP1):
    max=1500
    min=1000
    sum=0
    large_package={}
    sql="SELECT dscIp,length FROM `data` where srcIp='"+IP1+"'"
    results=get_data(sql)
    for result in results:
        if result[1]>min and result[1]<max:
            if result[0] in large_package:
                sum=large_package[result[0]]
                large_package[result[0]]=sum+1
            else:
                large_package[result[0]]=1
    ordered_large_package = sorted(large_package.items(), key=lambda x: x[1], reverse=True)
    return ordered_large_package

def Node_Links_Analyse(nodes):
    Links={}
    for node in nodes:
        sql="SELECT sum(count) FROM `link` where IP1='"+node+"'OR IP2='"+node+"'"
        results=get_data(sql)
        for result in results:
            Links[node]=result[0]
        ordered_Links = sorted(Links.items(), key=lambda x: x[1], reverse=True)
    return ordered_Links

def Wrong_Matched_Port():
    IPs={}
    sql="select srcIp,dscIp from `data` where srcPort=80 AND appProto='null'"
    count=0
    results=get_data(sql)
    for result in results:
        str=result[0]+"->"+result[1]+"     HTTP-80"
        if str in IPs:
            count=IPs[str]
            IPs[str]=count+1
        else:
            count=1
            IPs[str]=count
    IPs = sorted(IPs.items(), key=lambda x: x[1], reverse=True)
    return IPs

def DNS_HTTP_Mode():
    DH_Mode=[]
    sql = "select * from `data` where appProto='DNS' and  appInform4 is not null "
    results = get_data(sql)
    if  results:
        for result in results:
            DNS_Server=result[3]
            Queryer=result[4]
            Answer=result[13]
            DH_Single=[]
            DH_Single.append(Queryer)
            DH_Single.append(result[3])
            DH_Single.append(Answer)
            sql = "select * from `data` where appProto='HTTP' and  srcIp='"+Queryer+"'and dscIp='"+Answer+"'"
            results = get_data(sql)
            if results:
                sql = "select count from `link` where (IP1='" + Queryer + "'and IP2='" + Answer + \
                      "')or(IP1='"+Answer+"'and IP2='"+Queryer+"')"
                results = get_data(sql)
                DH_Single.append(results[0][0])
                DH_Mode.append(DH_Single)
            else:
                print("null")
    else:
        print("null")
    IP_Links={}
    for DH_Single in DH_Mode:
        str=DH_Single[0]+"->"+DH_Single[1]+"->"+DH_Single[2]
        IP_Links[str] = DH_Single[3]
    IP_Links = sorted(IP_Links.items(), key=lambda x: x[1], reverse=True)
    return IP_Links

