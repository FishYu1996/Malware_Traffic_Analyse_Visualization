# coding=UTF-8
from Tkinter import *
from PIL import Image, ImageTk
from Draw_Graph import *
from  Analyser import *
from  re import *
import Draw_Graph_0_0_1
IPs=[]

class App(object):
    subgraph_num = 0
    menu_deepth = 0
    def __init__(self, object):
        self.lb1 = LabelFrame(object, width=600, height=500, text='视图')
        self.lb1.grid(row=0, column=0, padx=15,rowspan=2)

        self.img = Image.open('test.png')  # 打开图片
        self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
        self.Label_Image = Label(self.lb1, width=580, height=460,image=self.photo)
        self.Label_Image.place(x=5,y=0)

        self.lb2= LabelFrame(object, width=400, height=500, text='显示控制')
        self.lb2.grid(row=0, column=1, padx=15,rowspan=2)

        self.control_title=Label(self.lb2,text='选择连通子图')
        self.control_title.place(x=130,y=0)

        self.control_tip = Label(self.lb2, text='IP节点                                    点的度')
        self.control_tip.place(x=80, y=40)

        self.ip_listbox=Listbox(self.lb2,width=40,height=10)
        self.ip_listbox.place(x=10,y=65)
        def menu_select():
            if self.menu_deepth==0:
                self.subgraph_num=self.ip_listbox.curselection()[0]
                self.control_title.config(text="第"+str(self.subgraph_num+1)+"连通子图")
                Draw_Graph_0_0_1.change_subgraph(self.subgraph_num)
                self.img = Image.open('test.png')  # 打开图片
                self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                self.Label_Image.config(image=self.photo)
                self.Label_Image.image = self.photo
                IPs=list(Draw_Graph_0_0_1.degree(0))
                self.Rank(IPs)
                self.menu_deepth=1

            elif self.menu_deepth==1 or self.menu_deepth==2:
                string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
                string_part = string.split()
                nodes = Draw_Graph_0_0_1.draw_SingleIP(string_part[0])
                self.img = Image.open('test.png')  # 打开图片
                self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                self.Label_Image.config(image=self.photo)
                self.Label_Image.image = self.photo
                IPs=Analyser.Node_Links_Analyse(nodes)
                self.Rank(IPs)
                self.control_title.config(text=string_part[0])
                self.control_tip.config(text="IP节点                                连接数")
                self.IP_details(string_part[0])
                self.menu_deepth=2

        def menu_return():
            if self.menu_deepth==1:
                IPs = Draw_Graph_0_0_1.draw()
                self.Rank(IPs)
                self.menu_deepth = 0
                self.control_title.config(text="选择连通子图")
                self.control_tip.config(text='IP节点                                    点的度')

            elif self.menu_deepth==2:
                self.control_title.config(text="第"+str(self.subgraph_num+1)+"连通子图")
                self.control_tip.config(text='IP节点                                    点的度')
                Draw_Graph_0_0_1.change_subgraph(self.subgraph_num)
                self.img = Image.open('test.png')  # 打开图片
                self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                self.Label_Image.config(image=self.photo)
                self.Label_Image.image = self.photo
                IPs = list(Draw_Graph_0_0_1.degree(0))
                self.Rank(IPs)
                self.menu_deepth = 1



        self.certain_button = Button(self.lb2,width=10,text="确定",command=menu_select)
        self.certain_button.place(x=50,y=300)
        self.return_button = Button(self.lb2,width=10, text="返回",command=menu_return)
        self.return_button.place(x=250,y=300)
        self.radVar = IntVar()  # 通过IntVar() 获取单选按钮value参数对应的值
        self.radVar.set(0)
        self.Order = ["度","介数中心性","点度中心性","连接数","小包占比","6"]
        def radCall():
            radSelect = self.radVar.get()
            if(self.menu_deepth!=0):
                if radSelect == 0:
                   #self.control_title.config(text="度排序")
                    self.control_tip.config(text="IP节点                                点的度")
                    IPs=list(Draw_Graph_0_0_1.degree(0))
                    self.Rank(IPs)
                elif radSelect == 1:
                    self.control_tip.config(text="IP节点                                介数中心性")
                    IPs = list(Draw_Graph_0_0_1.betweeness(0))
                    self.Rank(Draw_Graph_0_0_1.betweeness(0))
                elif radSelect == 2:
                    self.control_tip.config(text="IP节点                                点度中心性")
                    IPs = list(Draw_Graph_0_0_1.degree_centrality(0))
                    self.Rank(Draw_Graph_0_0_1.degree_centrality(0))
                elif radSelect == 3:
                    self.control_tip.config(text="IP节点                                连接数")
                    IPs=Draw_Graph_0_0_1.transfer_nodes()
                    self.Rank(Analyser.Node_Links_Analyse(IPs))
                elif radSelect == 4:
                    self.control_tip.config(text="IP节点                                小包占比")
                    IPs = Draw_Graph_0_0_1.transfer_nodes()
                    self.Rank(Analyser.Node_Length_Analyse(IPs))
                print radSelect
        for col in range(2):
            for col2 in range(3):
                Order_Rad = Radiobutton(self.lb2, text=self.Order[col*3+col2], variable=self.radVar, value=col*3+col2,
                            command=radCall)
                Order_Rad.place(x=130 * col2+20, y=350+col*50)

        self.lb3 = LabelFrame(object, width=400, height=250, text='信息显示')
        self.lb3.grid(row=0, column=2, padx=15)

        self.inform_text_x=100
        self.inform_Text0 = Label(self.lb3, text="度")
        self.inform_Text0.place(x=self.inform_text_x * 0 + 20, y=0 * 40 +5)
        self.inform_Text1 = Label(self.lb3, text=0)
        self.inform_Text1.place(x=self.inform_text_x * 1 + 20, y=0 * 40 + 5)
        self.inform_Text2 = Label(self.lb3, text="介数中心性")
        self.inform_Text2.place(x=self.inform_text_x * 0 + 20, y=1 * 40 + 5)
        self.inform_Text3 = Label(self.lb3, text=0)
        self.inform_Text3.place(x=self.inform_text_x * 1 + 20, y=1 * 40 + 5)
        self.inform_Text4 = Label(self.lb3, text="点度中心性")
        self.inform_Text4.place(x=self.inform_text_x * 0 + 20, y=2 * 40 + 5)
        self.inform_Text5 = Label(self.lb3, text=0)
        self.inform_Text5.place(x=self.inform_text_x * 1 + 20, y=2 * 40 + 5)
        self.inform_Text6 = Label(self.lb3, text="连接数")
        self.inform_Text6.place(x=self.inform_text_x * 0 + 20, y=3 * 40 + 5)
        self.inform_Text7 = Label(self.lb3, text=0)
        self.inform_Text7.place(x=self.inform_text_x * 1 + 20, y=3 * 40 + 5)
        self.inform_Text8 = Label(self.lb3, text="小包占比")
        self.inform_Text8.place(x=self.inform_text_x * 0 + 20, y=4 * 40 + 5)
        self.inform_Text9 = Label(self.lb3, text=0)
        self.inform_Text9.place(x=self.inform_text_x * 1 + 20, y=4 * 40 + 5)

        self.lb4 = LabelFrame(object, width=400, height=250, text='特殊识别')
        self.lb4.grid(row=1, column=2, padx=15)

    def Rank(self,Informs):
        self.ip_listbox.delete(0, 'end')
        for Inform in Informs:
            format_string = "%(IP)-40s%(Count) 8.2f" % {'IP': Inform[0], 'Count': Inform[1]}
            self.ip_listbox.insert('end', format_string)
        self.ip_listbox.select_set(0)

    def IP_details(self,IP):
        #print(IP+"*")
        IPs=Draw_Graph_0_0_1.degree(1)
        for IP_degree in IPs:
            flag=cmp(IP,IP_degree[0])
            if flag==0:
                self.inform_Text1.config(text=IP_degree[1])
                break
        IPs = Draw_Graph_0_0_1.betweeness(1)
        for IP_betweeness in IPs:
            flag=cmp(IP,IP_betweeness[0])
            if flag==0:
                self.inform_Text3.config(text=round(IP_betweeness[1],5))
                break
        IPs = Draw_Graph_0_0_1.degree_centrality(1)
        print(IPs)
        for IP_centrality in IPs:
            flag = cmp(IP, IP_centrality[0])
            if flag == 0:
                self.inform_Text5.config(text=round(IP_centrality[1],5))
                break
        IP_list=[]
        IP_list.append(IP)
        self.inform_Text7.config(text=Analyser.Node_Links_Analyse(IP_list)[0][1])
        self.inform_Text9.config(text=round(Analyser.Node_Length_Analyse(IP_list)[0][1],5))
        print("test")

IPs = Draw_Graph_0_0_1.draw()
root = Tk()
root.title("APP")
app = App(root)
app.Rank(IPs)
root.mainloop()

# string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
# string_part=string.split();