package TestJpcap;
import java.util.HashMap;
import java.util.Iterator;

public class HTTPPacket {
	byte[]data;
    String direction=null;
    StringBuffer Methoud;
    StringBuffer URL;
    StringBuffer Version;
    StringBuffer Status;
    StringBuffer Discription;
    HashMap<String,String> Head;
    StringBuffer Body=null;
    private int point =0;
    private String tempstr="";
    
    
	public HTTPPacket() {
		// TODO Auto-generated constructor stub
		 Head=new HashMap<String,String>();
		 Methoud=new StringBuffer();
		 URL=new StringBuffer();
		 Version=new StringBuffer();
		 Body = new StringBuffer();
		 Status=new StringBuffer();
		 Discription=new StringBuffer();
	}
	public void Initial(byte[]data){
		this.data=data;
		this.setDirection();
		if(this.direction.equals("Request")){
			for(int i=0;i<3;i++){
				RowInformation(i,this.point,this.direction);
			}
			Head(this.point);
			if(this.point<this.data.length)
			    Body(this.point);
		}
		else if(this.direction.equals("Response")){
			for(int i=0;i<3;i++){
				RowInformation(i,this.point,this.direction);
			}
			Head(this.point);
			if(this.point<this.data.length)
			    Body(this.point);
		}
		else{
			System.out.println("error!");
		}
	}
/**
	public void findHTTP(){
		char tempchar[]=new char[4];
		String tempstr;
		int i=0;
		while((i+3)<data.length){
			tempchar[3]=(char)this.data[i+4];
			tempchar[2]=tempchar[3];
			tempchar[1]=tempchar[2];
			tempchar[0]=tempchar[1];
			tempstr=""+tempchar[0]+tempchar[1]+tempchar[2]+tempchar[3];
			if(tempstr.equals("HTTP")){
	    		this.direction="Response";
	    	}
	    	else if(){
	    		this.direction="Request";
	    	}
		}
	}
**/
//如果TCP带有data部分，会有问题	
    public void setDirection(){
    	for(int i=0;i<4;i++){
    		tempstr=tempstr+(char)data[i];
    	}
    	if(tempstr.equals("HTTP")){
    		this.direction="Response";
    	}
    	else{
    		this.direction="Request";
    	}
    }
    
    public void RowInformation(int state,int point,String direction){
    	int tdata;
    	String tstr="";
    	String Hex=null;
    	System.out.println(this.direction);
    	System.out.println(this.Methoud);
    	do{
    	    //以下将byte数据转化为十六进制数（String格式）
    	    tdata=Byte.toUnsignedInt(data[point]);
            Hex=Integer.toHexString(tdata);
            if(Hex.equals("20")){
            	this.point=point+1;
            	break;
            }
            else if(Hex.equals("d")){
            	this.point=point+2;//0d0a 回车换行
            	break;
            }
            tstr=tstr+(char)data[point];
            point++;
    	}while(true);
    	if(direction.equals("Request")){
    	    switch (state){
    	        case 0:
    		        this.Methoud.append(tstr);
    		        break;
    	        case 1:
    	    	    this.URL.append(tstr);
    		        break;
    	        case 2:
    	    	    this.Version.append(tstr);
    		        break;
            }
    	}
    	else if(direction.equals("Response")){
    		switch (state){
	        case 0:
		        this.Version.append(tstr);
		        break;
	        case 1:
	    	    this.Status.append(tstr);
		        break;
	        case 2:
	    	    this.Discription.append(tstr);
		        break;
            }
    	}
    }
    
    public void Head(int point){
    	int tdata[]=new int[2];
    	String Hex=null;
    	String Hex2=null;
    	int headEnd=0;
    	do{
    		String tstr="";
    		StringBuffer Key=new StringBuffer();
    		StringBuffer Value=new StringBuffer();
    	    do{
    	    //以下将byte数据转化为十六进制数（String格式）
    	        tdata[0]=Byte.toUnsignedInt(data[point]);
                Hex=Integer.toHexString(tdata[0]);
                tdata[1]=Byte.toUnsignedInt(data[point+1]);
                Hex2=Integer.toHexString(tdata[1]);
                if(Hex.equals("3a")&&(Hex2.equals("20"))){
                	Key.append(tstr);
                	tstr="";
                	point+=2;
                    headEnd=0;
                }
                else if(Hex.equals("d")&&(Hex2.equals("a"))){
                	Value.append(tstr);
                    point+=2;
                    this.Head.put(Key.toString(), Value.toString());
                    headEnd+=1;
                    break;
                }
                else{
                    tstr=tstr+(char)data[point];
                    point++;
                    headEnd=0;
                }
    	    }while(true);
    	    this.point=point;
    	    if(headEnd==2)
    	    	break;
    	}while(true);
    	/**
    	Iterator it = this.Head.keySet().iterator();
    	String Keys[];
    	String Values[];
 	    Keys=new String[this.Head.size()];
 	    Values=new String[this.Head.size()];
 	    int i=0;
        while (it.hasNext()) {
            Keys[i] = (String)it.next();
            Values[i] = Head.get(Keys[i]);
            i++;  
        }
        **/
    }
    public void Body(int point){
    	String tstr="";
    	do{
    	    //以下将byte数据转化为十六进制数（String格式）
            tstr=tstr+(char)data[point];
            point++;
    	}while(point<this.data.length);
    	this.point=point;
    	this.Body.append(tstr);
    }
}
