package demos;


import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

import javax.swing.JFrame;

import org.gephi.filters.api.FilterController;
import org.gephi.filters.plugin.graph.DegreeRangeBuilder.DegreeRangeFilter;
import org.gephi.graph.api.DirectedGraph;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.io.importer.api.Container;
import org.gephi.io.importer.api.ImportController;
import org.gephi.io.processor.plugin.DefaultProcessor;
import org.gephi.layout.plugin.fruchterman.FruchtermanReingold;
import org.gephi.preview.api.G2DTarget;
import org.gephi.preview.api.PreviewController;
import org.gephi.preview.api.PreviewModel;
import org.gephi.preview.api.PreviewProperty;
import org.gephi.preview.api.RenderTarget;
import org.gephi.preview.types.DependantColor;
import org.gephi.preview.types.DependantOriginalColor;
import org.gephi.preview.types.EdgeColor;
import org.gephi.project.api.ProjectController;
import org.gephi.project.api.Workspace;
import org.openide.util.Lookup;

public class GephiDemoMain {

    public static void main(String[] args) {
        GephiDemoMain met = new GephiDemoMain();
        met.script();
    }

    public void script() {
        //鍒濆鍖栦竴涓猵roject锛屽苟鑾峰彇workspace
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.newProject();
        Workspace workspace = pc.getCurrentWorkspace();

        //鑾峰彇graphModel鍜岄渶瑕佺敤鍒扮殑controller
        GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getGraphModel();
        ImportController importController = Lookup.getDefault().lookup(ImportController.class);
        FilterController filterController = Lookup.getDefault().lookup(FilterController.class);

        //杈撳叆鏂囦欢锛屾殏鏃朵粎鏀寔csv鏂囦欢锛屽苟灏嗚緭鍏ョ殑鏂囦欢鍜屼箣鍓嶈幏鍙栫殑workspace鍏宠仈
        Container container;
        try {
            File file = new File("C:\\Users\\Administrator\\Desktop\\test.csv");
            container = importController.importFile(file);
        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }
        importController.process(container, new DefaultProcessor(), workspace);
        
        //鏍规嵁杈撳叆鏂囦欢鐢熸垚鏈夊悜鍥撅紝骞惰緭鍑鸿鍥剧殑鐐规暟鍜岃竟鏁�
        DirectedGraph graph = graphModel.getDirectedGraph();
//        UndirectedGraph graph = graphModel.getUndirectedGraph();
        System.out.println("Nodes: " + graph.getNodeCount());
        System.out.println("Edges: " + graph.getEdgeCount());
             
/*************************************************************************************************************/
        
        //Fruchterman甯冨眬璁剧疆锛屽彲灏嗚仈閫氱殑瀛愬浘鍒嗙寮�鏉�
        FruchtermanReingold myLayout = new FruchtermanReingold(null);
        myLayout.setGraphModel(graphModel);
        myLayout.setArea(10000.0f);
        myLayout.setGravity(10.0);
        myLayout.setSpeed(500.0);
      
        myLayout.initAlgo();
        for (int i = 0; i < 20000 && myLayout.canAlgo(); i++) {
          myLayout.goAlgo();
        }
        myLayout.endAlgo();

//        //Filter璁剧疆锛屾牴鎹偣鐨勫害鏉ヨ繘琛岃繃婊�
//        DegreeRangeFilter degreeFilter = new DegreeRangeFilter();
////        InDegreeRangeFilter idf = new InDegreeRangeFilter();
////        OutDegreeRangeFilter odf = new OutDegreeRangeFilter();
//        degreeFilter.init(graph);
//        degreeFilter.setRange(new Range(10, Integer.MAX_VALUE));     //婊ゅ嚭搴﹀ぇ浜庣瓑浜�10鐨勭偣
//        Query query = filterController.createQuery(degreeFilter);
//        GraphView view = filterController.filter(query);
//        graphModel.setVisibleView(view);
        

        
        //graph鐨勭偣灞炴�э紝杈瑰睘鎬�
        PreviewController previewController = Lookup.getDefault().lookup(PreviewController.class);
        PreviewModel previewModel = previewController.getModel();
        
        previewModel.getProperties().putValue(PreviewProperty.ARROW_SIZE, 5);
        previewModel.getProperties().putValue(PreviewProperty.DIRECTED, Boolean.TRUE);
        previewModel.getProperties().putValue(PreviewProperty.MARGIN, 10f); //鍥捐窛绂籪rame杈圭殑璺濈
        previewModel.getProperties().putValue(PreviewProperty.MOVING, Boolean.FALSE);//绉诲姩鐢诲竷锛焧rue鏃惰竟鍜岄《鐐筰d閮芥病浜�
        previewModel.getProperties().putValue(PreviewProperty.VISIBILITY_RATIO, 1f);//鏄剧ず鐨勬瘮渚嬶紝1f涓�100%锛岀偣瓒呯骇澶氱殑璇濆彲浠ユ樉绀轰竴閮ㄥ垎
        previewModel.getProperties().putValue(PreviewProperty.BACKGROUND_COLOR, Color.WHITE);
        
        previewModel.getProperties().putValue(PreviewProperty.SHOW_NODE_LABELS, Boolean.TRUE);//鏄惧紡鐐圭殑id涓庡惁
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_COLOR, new DependantOriginalColor(Color.LIGHT_GRAY));//鐐规爣绛鹃鑹�
//        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_COLOR, Color.WHITE);
//        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_FONT,);//瀛椾綋
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_MAX_CHAR, 10);
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_PROPORTIONAL_SIZE, Boolean.TRUE);
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_SHORTEN, Boolean.FALSE);        
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_SHOW_BOX, Boolean.FALSE);//false锛屼笉濂界湅
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_BOX_COLOR, new DependantColor(Color.WHITE));
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_BOX_OPACITY,10f);
        previewModel.getProperties().putValue(PreviewProperty.NODE_OPACITY, 100f);//鐐圭殑閫忔槑搴�
        previewModel.getProperties().putValue(PreviewProperty.NODE_BORDER_COLOR, new DependantColor(Color.WHITE));
        previewModel.getProperties().putValue(PreviewProperty.NODE_BORDER_WIDTH, 2f);

        previewModel.getProperties().putValue(PreviewProperty.SHOW_EDGE_LABELS, Boolean.TRUE);
        previewModel.getProperties().putValue(PreviewProperty.SHOW_EDGES, Boolean.TRUE);//鏄句笉鏄剧ず杈�
        previewModel.getProperties().putValue(PreviewProperty.EDGE_CURVED, Boolean.FALSE);//杈规槸鍚﹀集鏇诧紝寮殑鏃犲悜锛岀洿鐨勬湁鍚�
        previewModel.getProperties().putValue(PreviewProperty.EDGE_OPACITY, 50);//杈圭殑閫忔槑搴�
        previewModel.getProperties().putValue(PreviewProperty.EDGE_RADIUS, 0f);//绠ご鍒扮偣鐨勯棿闅�
        previewModel.getProperties().putValue(PreviewProperty.EDGE_COLOR, new EdgeColor(Color.BLACK));
//        previewModel.getProperties().putValue(PreviewProperty.EDGE_RESCALE_WEIGHT, Boolean.FALSE);
        previewModel.getProperties().putValue(PreviewProperty.EDGE_THICKNESS, 1f);
        
        
        //鏄剧ずJFrame
        G2DTarget target = (G2DTarget) previewController.getRenderTarget(RenderTarget.G2D_TARGET);
        final PreviewSketch previewSketch = new PreviewSketch(target);
        previewController.refreshPreview();

        JFrame frame = new JFrame("DisplayWindow");
        frame.setLayout(new BorderLayout());

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(previewSketch, BorderLayout.CENTER);

        frame.setSize(1024, 768);
        frame.addComponentListener(new ComponentAdapter(){
            @Override
            public void componentShown(ComponentEvent e){
                previewSketch.resetZoom();
            }
        });
        frame.setVisible(true);
    }
}
