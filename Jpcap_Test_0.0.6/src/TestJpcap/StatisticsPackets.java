package TestJpcap;
import jpcap.JpcapCaptor;
import jpcap.NetworkInterface;
import jpcap.NetworkInterfaceAddress;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StatisticsPackets {
	Statement stmt ; 
	Connection conn;
	String sql;
	String[] srcIps;
	int[] PacketNumber;
	float[] PacketLength;
	float[] SmaPackProp;
	HashMap<String,Integer> PacketCounter;
	HashMap<String,Integer> Protocol;
	public StatisticsPackets() {
		PacketCounter=new HashMap<String,Integer>();
		Protocol=new HashMap<String,Integer>();
	}
	public void AnalysisEntry(){
		ReadData();
		SavingIps();
		PrintData();
	}
	public void LinkDB(){
		try {  
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();  
  
            String databaseName = "test";// 已经在MySQL数据库中创建好的数据库。  
            String userName = "root";// MySQL默认的root账户名  
            String password = "root";// 默认的root账户密码为空  
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + databaseName+"?useSSL=false&serverTimezone=UTC", userName, password);          
            stmt = conn.createStatement();
            if(conn!=null)
             System.out.println("连接数据库成功！");
            else
             System.out.println("连接数据库失败！");
		 } catch (Exception e) {  
	            e.printStackTrace();  
	     }  
	}
    public void ReadData(){
      LinkDB();
      sql="SELECT srcIp ,COUNT(*) FROM `data` GROUP BY srcIp";
      try {
		ResultSet rs=stmt.executeQuery(sql);
		while(rs.next()){
        	PacketCounter.put(rs.getString(1), rs.getInt(2));
		}
     } catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
     }
   }
   public void SavingIps(){
	   Iterator it = PacketCounter.keySet().iterator();
	   srcIps=new String[PacketCounter.size()];
	   PacketNumber=new int[PacketCounter.size()];
	   int i=0;
       while (it.hasNext()) {
           srcIps[i] = (String)it.next();
           PacketNumber[i] = PacketCounter.get(srcIps[i]);
           i++; 
           
       }
   }
   public void PacketLength(){
	   int i=0;
	   PacketLength=new float[PacketCounter.size()];
	   SmaPackProp=new float[PacketCounter.size()];
	   while(i<srcIps.length){
	    try {
	     int mini=0;
	     int sumlength=0;
	     sql="SELECT length FROM `data` where srcIp='"+srcIps[i]+"'";
		 ResultSet rs=stmt.executeQuery(sql);
		  while(rs.next()){
			if(rs.getInt(1)<100)
			  mini++;
			sumlength+=rs.getInt(1);
		  }
		 PacketLength[i]=(float)sumlength/PacketNumber[i];
		 SmaPackProp[i]=(float)mini/PacketNumber[i];
		 i++;
	    } catch (SQLException e) {
		 e.printStackTrace();
	    } 
	  }
	  i=0;
	  System.out.println("--------------------------------包大小分析---------------------------------------");
	  System.out.println("源地址                    数据包数量          平均大小          小型数据包(<100字节)占比");
	  while(i<srcIps.length){
		System.out.println(srcIps[i]+"     "+PacketNumber[i]+"           "+PacketLength[i]+"            "+SmaPackProp[i]);
		i++;
	  }
   }
   public void Protocol(String ip){
	  int j=0;
	  String[] protocol;
      sql="SELECT protocol ,COUNT(*) FROM `data`WHERE srcIp='"+ip+"' GROUP BY protocol";
      try {
		ResultSet rs=stmt.executeQuery(sql);
		while(rs.next()){
			   Protocol.put(rs.getString(1), rs.getInt(2));
		}
	  } catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	  }
      
      protocol =new String[Protocol.size()]; 
	  System.out.println("   (IP下)应用层协议号     数量");
	  Iterator it2 = Protocol.keySet().iterator();
	  while (it2.hasNext()) {
		protocol[j] = (String)it2.next();
		System.out.println("              "+protocol[j]+"       "+Protocol.get(protocol[j]));
		j++;
	  }
   }
   public void PacketPort(){
	  int i=0;
	  int j=0;
	  String tempString;
	  int value;
	  HashMap<String,Integer> PacketPort;
	  PacketPort=new HashMap<String,Integer>();
	  String[] protocol;
	  System.out.println("--------------------------------通信端口分析---------------------------------------");
	  while(i<srcIps.length){
		 System.out.println("源地址 "+srcIps[i]);
		 Protocol(srcIps[i]);
		 protocol=new String[Protocol.size()];
		 Iterator it2 = Protocol.keySet().iterator();
 	     j=0;
   	     while (it2.hasNext()) { 	
   	       protocol[j] = (String)it2.next();
   	       j++;
   	     }
   	     j=0;
         while(j<Protocol.size()){
		      try {
		       sql="SELECT srcPort,dscPort FROM `data` where srcIp='"+srcIps[i]+"'AND protocol="+protocol[j];
			   ResultSet rs=stmt.executeQuery(sql);
			    while(rs.next()){
				   tempString=rs.getString(1)+" > "+rs.getString(2);
				   if (PacketPort.containsKey(tempString)){
			         value = PacketPort.get(tempString);
			         PacketPort.put(tempString,  value+1);
			       } 
			  	   else {
			         PacketPort.put(tempString, 1);
			       }
			    }
		      } catch (SQLException e) {
			    e.printStackTrace();
		      }
		      System.out.println("      应用层协议号   "+protocol[j]+" :");
		      System.out.println("      源端口 > 目的端口        数量");
			  Iterator it = PacketPort.keySet().iterator();
		      while (it.hasNext()) {
		        String PTP = (String)it.next();
		        int number = PacketPort.get(PTP);
		        System.out.println("     "+PTP+"      "+number);
		      }
		      System.out.println(); 
		      PacketPort.clear();
		      j++;
        }
		    Protocol.clear();
		    i++;
	 }		    
   }
   public void PrintData(){
	   PacketLength();
	   PacketPort();
   }
   public void CloseConn(){
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		};
	}
}
