# coding=UTF-8
from Tkinter import *
from PIL import Image, ImageTk
from Draw_Graph import *
from  Analyser import *
from  re import *
import Draw_Graph_0_0_1
IPs=[]

class App():
    Section_for_Analyse=0
    subgraph_num = 0
    menu_deepth = 0
    menu_special=0
    menu_special_method=0
    universal=""
    load_in_flag=0
    def __init__(self):
        self.root = Tk()
        self.root.title("APP")

        menu = Menu(self.root)

        self.root.config(menu=menu)# 创建“系统”子菜单
        def Load_In():
            IPs = Draw_Graph_0_0_1.draw()
            self.Rank(IPs)
            self.load_in_flag=1
            self.menu_deepth = 0
        submenu=Menu(menu,tearoff=0)
        submenu.add_command(label="导入",command=Load_In)
        submenu.add_separator()
        submenu.add_command(label="退出",command=self.root.quit)
        menu.add_cascade(label="系统",menu=submenu)

        def All_Node_Analyse():
            if self.load_in_flag==1:
                global IPs
                self.control_title.config(text="所有节点")
                self.control_tip.config(text='IP节点                                    点的度')
                IPs = list(Draw_Graph_0_0_1.draw_all())
                img = Image.open('test.png')  # 打开图片
                photo = ImageTk.PhotoImage(img)  # 用PIL模块的PhotoImage打开
                self.Label_Image.config(image=photo)
                self.Label_Image.image = photo
                self.Rank(Draw_Graph_0_0_1.degree(0))
                self.menu_deepth=1
                self.all_node_flag=1
                self.Section_for_Analyse = 1


        submenu=Menu(menu,tearoff=0)
        submenu.add_command(label="点分析",command=All_Node_Analyse)
        menu.add_cascade(label="所有点信息",menu=submenu)
        def All_Link_Analyse():
            if self.load_in_flag==1:
                self.control_title.config(text="所有边")
                self.control_tip.config(text='IP对                                    连接数')
                self.inform_Text0.config(text="连接数")
                self.inform_Text1.config(text="0")
                self.inform_Text2.config(text="小包数/占比")
                self.inform_Text3.config(text="0/0")
                self.inform_Text4.config(text="大包数/占比")
                self.inform_Text5.config(text="0/0")
                self.inform_Text6.config(text="DNS/占比")
                self.inform_Text7.config(text="0/0")
                self.inform_Text8.config(text="HTTP/占比")
                self.inform_Text9.config(text="0/0")
                Links=Analyser.All_Link_Analyse()
                self.Rank(Analyser.Link_Connections())
                self.Section_for_Analyse=2


        submenu=Menu(menu,tearoff=0)
        submenu.add_command(label="所有边信息",command=All_Link_Analyse)
        submenu.add_command(label="方向")
        menu.add_cascade(label="边分析",menu=submenu)

        submenu = Menu(menu, tearoff=0)
        submenu.add_command(label="连通图")
        menu.add_cascade(label="连通图分析", menu=submenu)

        def Wrong_Matched():
            if self.load_in_flag==1:
                self.Rank(Analyser.Wrong_Matched_Port())
                self.menu_special = 1
                self.control_title.config(text="端口协议不匹配")
                self.control_tip.config(text='IP节点对                                    协议-端口       数量')

        def Special_mode_DH():
            if self.load_in_flag==1:
                self.Rank(Analyser.DNS_HTTP_Mode())
                self.menu_special = 2
                self.control_title.config(text="DNS-HTTP模式")
                self.control_tip.config(text='询问方IP      DNS服务器        答复IP        询问与答复IP通讯数量')

        submenu = Menu(menu, tearoff=0)
        submenu.add_command(label="端口协议不匹配",command=Wrong_Matched)
        submenu.add_command(label="DNS—HTTP流分析",command=Special_mode_DH)
        menu.add_cascade(label="特殊模式分析", menu=submenu)

        self.lb1 = LabelFrame(self.root, width=600, height=500, text='视图')
        self.lb1.grid(row=0, column=0, padx=15,rowspan=2)

        self.img = Image.open('cover1.png')  # 打开图片
        self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
        self.Label_Image = Label(self.lb1, width=580, height=460,image=self.photo)
        self.Label_Image.place(x=5,y=0)

        self.lb2= LabelFrame(self.root, width=500, height=500, text='显示控制')
        self.lb2.grid(row=0, column=1, padx=15,rowspan=2)

        self.control_title=Label(self.lb2,text='选择连通子图')
        self.control_title.place(x=130,y=0)

        self.control_tip = Label(self.lb2, text='IP节点                                    点的度')
        self.control_tip.place(x=60, y=40)

        def show_msg(*args):
            if self.Section_for_Analyse==2:
                string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
                IP = re.split(r"->| ", string)
                self.Link_details(IP[0],IP[1])
            else:
                if self.menu_special==0 and self.menu_deepth!=0:
                    string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
                    IP = re.split(r"->| ", string)
                    self.IP_details(IP[0])
                elif self.menu_special==1:
                    print("test")
                elif self.menu_special==2:
                    print("test2")
        self.ip_listbox=Listbox(self.lb2,width=50,height=10)
        self.ip_listbox.place(x=10,y=65)
        self.ip_listbox.bind("<<ListboxSelect>>", show_msg)

        def menu_select():
            if self.menu_special==0:
                if self.Section_for_Analyse==1 or self.Section_for_Analyse==0 :
                    if self.menu_deepth==0:
                        self.subgraph_num=self.ip_listbox.curselection()[0]
                        self.control_title.config(text="第"+str(self.subgraph_num+1)+"连通子图")
                        Draw_Graph_0_0_1.change_subgraph(self.subgraph_num)
                        self.img = Image.open('test.png')  # 打开图片
                        self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                        self.Label_Image.config(image=self.photo)
                        self.Label_Image.image = self.photo
                        IPs=list(Draw_Graph_0_0_1.degree(0))
                        self.Rank(IPs)
                        self.menu_deepth=1
                    elif self.menu_deepth==1 or self.menu_deepth==2:
                        string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
                        string_part = string.split()
                        nodes = Draw_Graph_0_0_1.draw_SingleIP(string_part[0])
                        self.img = Image.open('test.png')  # 打开图片
                        self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                        self.Label_Image.config(image=self.photo)
                        self.Label_Image.image = self.photo
                        IPs=Analyser.Node_Links_Analyse(nodes)
                        self.Rank(IPs)
                        self.control_title.config(text=string_part[0])
                        self.control_tip.config(text="IP节点                                连接数")
                        self.IP_details(string_part[0])
                        self.menu_deepth=2
                elif self.Section_for_Analyse==2:
                    string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
                    IP = re.split(r"->| ", string)
                    Draw_Graph_0_0_1.draw_Line(IP[0], IP[1])
                    self.img = Image.open('Line.png')  # 打开图片
                    self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                    self.Label_Image.config(image=self.photo)
                    self.Label_Image.image = self.photo
                    '''
                    protocols=Analyser.Link_Protocol_Analyse(IP[0], IP[1],0)
                    protocol_proper=[]
                    for protocol in protocols:
                        string = str(protocol)
                        IP = re.split(r"/|", string)
                        protocol_proper.append(IP[1])
                    Draw_Graph_0_0_1.draw_pie(protocol_proper)
                    self.img = Image.open('pie.png')  # 打开图片
                    self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                    self.Label_Image.config(image=self.photo)
                    self.Label_Image.image = self.photo
                    '''
            elif self.menu_special==1:
                self.Choose_Ip_wrong_matched()
                self.menu_special=0
                self.menu_deepth=1
            elif self.menu_special==2:
                self.DH_Mode()
                self.menu_special = 0
                self.menu_deepth = 1

        def menu_return():
            if self.menu_special!=0:
                self.menu_special=0
                self.menu_deepth+=1
                self.menu_special_method=0
            if self.menu_deepth==1:
                IPs = Draw_Graph_0_0_1.draw()
                self.Rank(IPs)
                self.menu_deepth = 0
                self.control_title.config(text="选择连通子图")
                self.control_tip.config(text='IP节点                                    点的度')
                self.Section_for_Analyse=0
            elif self.menu_deepth==2 or self.menu_deepth==3:
                if self.Section_for_Analyse==0:
                    self.control_title.config(text="第"+str(self.subgraph_num+1)+"连通子图")
                    self.control_tip.config(text='IP节点                                    点的度')
                    self.inform_Text1.config(text=0)
                    self.inform_Text3.config(text=0)
                    self.inform_Text5.config(text=0)
                    self.inform_Text7.config(text=0)
                    self.inform_Text9.config(text=0)
                    Draw_Graph_0_0_1.change_subgraph(self.subgraph_num)
                    self.img = Image.open('test.png')  # 打开图片
                    self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                    self.Label_Image.config(image=self.photo)
                    self.Label_Image.image = self.photo
                    IPs = list(Draw_Graph_0_0_1.degree(0))
                    self.Rank(IPs)
                    self.menu_deepth = 1
                elif self.Section_for_Analyse==1:
                    self.control_title.config(text="所有节点")
                    self.control_tip.config(text='IP节点                                    点的度')
                    self.inform_Text1.config(text=0)
                    self.inform_Text3.config(text=0)
                    self.inform_Text5.config(text=0)
                    self.inform_Text7.config(text=0)
                    self.inform_Text9.config(text=0)
                    IPs=Draw_Graph_0_0_1.draw_all()
                    self.img = Image.open('test.png')  # 打开图片
                    self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开
                    self.Label_Image.config(image=self.photo)
                    self.Label_Image.image = self.photo
                    self.Rank(Draw_Graph_0_0_1.degree(0))
                    self.menu_deepth = 1
        '''
        def analyse_DH():
            if self.menu_special==2:
                string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
                IP = re.split(r"->| ", string)
                self.universal=IP[0]
                IPs=list(Link_Small_Length_Analyse(IP[0]))
                self.Rank(IPs)
                self.control_title.config(text="询问方IP   " + IP[0]+" 小包分布" )
                self.control_tip.config(text='目标IP                                    小包数量')
                IPs = list(Link_Large_Length_Analyse(self.universal))
                self.Rank(IPs)
                self.control_title.config(text="询问方IP   " + self.universal + " 大包分布")
                self.control_tip.config(text='目标IP                                    大包数量')
        '''
        self.certain_button = Button(self.lb2,width=10,text="确定",command=menu_select)
        self.certain_button.place(x=50,y=300)
        self.return_button = Button(self.lb2,width=10, text="返回",command=menu_return)
        self.return_button.place(x=180,y=300)
        #self.analyse_button = Button(self.lb2, width=10, text="分析")
        #self.analyse_button.place(x=310, y=300)
        self.radVar = IntVar()  # 通过IntVar() 获取单选按钮value参数对应的值
        self.radVar.set(0)
        self.Order = ["度","介数中心性","点度中心性","连接数","小包占比","6"]
        def radCall():
            radSelect = self.radVar.get()
            if self.menu_special==0 and self.menu_deepth!=0:
                if radSelect == 0:
                   #self.control_title.config(text="度排序")
                    self.control_tip.config(text="IP节点                                点的度")
                    IPs=list(Draw_Graph_0_0_1.degree(0))
                    self.Rank(IPs)
                elif radSelect == 1:
                    self.control_tip.config(text="IP节点                                介数中心性")
                    IPs = list(Draw_Graph_0_0_1.betweeness(0))
                    self.Rank(Draw_Graph_0_0_1.betweeness(0))
                elif radSelect == 2:
                    self.control_tip.config(text="IP节点                                点度中心性")
                    IPs = list(Draw_Graph_0_0_1.degree_centrality(0))
                    self.Rank(Draw_Graph_0_0_1.degree_centrality(0))
                elif radSelect == 3:
                    self.control_tip.config(text="IP节点                                连接数")
                    IPs=Draw_Graph_0_0_1.transfer_nodes()
                    self.Rank(Analyser.Node_Links_Analyse(IPs))
                elif radSelect == 4:
                    self.control_tip.config(text="IP节点                                小包占比")
                    IPs = Draw_Graph_0_0_1.transfer_nodes()
                    self.Rank(Analyser.Node_Length_Analyse(IPs))
        for col in range(2):
            for col2 in range(3):
                Order_Rad = Radiobutton(self.lb2, text=self.Order[col*3+col2], variable=self.radVar, value=col*3+col2,
                            command=radCall)
                Order_Rad.place(x=130 * col2+20, y=350+col*50)

        self.lb3 = LabelFrame(self.root, width=400, height=250, text='信息显示')
        self.lb3.grid(row=0, column=2, padx=15)

        self.inform_text_x=100
        self.inform_Text0 = Label(self.lb3, text="度")
        self.inform_Text0.place(x=self.inform_text_x * 0 + 20, y=0 * 40 +5)
        self.inform_Text1 = Label(self.lb3, text=0)
        self.inform_Text1.place(x=self.inform_text_x * 1 + 20, y=0 * 40 + 5)
        self.inform_Text2 = Label(self.lb3, text="介数中心性")
        self.inform_Text2.place(x=self.inform_text_x * 0 + 20, y=1 * 40 + 5)
        self.inform_Text3 = Label(self.lb3, text=0)
        self.inform_Text3.place(x=self.inform_text_x * 1 + 20, y=1 * 40 + 5)
        self.inform_Text4 = Label(self.lb3, text="点度中心性")
        self.inform_Text4.place(x=self.inform_text_x * 0 + 20, y=2 * 40 + 5)
        self.inform_Text5 = Label(self.lb3, text=0)
        self.inform_Text5.place(x=self.inform_text_x * 1 + 20, y=2 * 40 + 5)
        self.inform_Text6 = Label(self.lb3, text="连接数")
        self.inform_Text6.place(x=self.inform_text_x * 0 + 20, y=3 * 40 + 5)
        self.inform_Text7 = Label(self.lb3, text=0)
        self.inform_Text7.place(x=self.inform_text_x * 1 + 20, y=3 * 40 + 5)
        self.inform_Text8 = Label(self.lb3, text="小包占比")
        self.inform_Text8.place(x=self.inform_text_x * 0 + 20, y=4 * 40 + 5)
        self.inform_Text9 = Label(self.lb3, text=0)
        self.inform_Text9.place(x=self.inform_text_x * 1 + 20, y=4 * 40 + 5)

        self.lb4 = LabelFrame(self.root, width=400, height=250, text='特殊识别')
        self.lb4.grid(row=1, column=2, padx=15)


    def Rank(self,Informs):
        self.ip_listbox.delete(0, 'end')
        for Inform in Informs:
            format_string = "%(IP)-40s%(Count) 8.2f" % {'IP': Inform[0], 'Count': Inform[1]}
            self.ip_listbox.insert('end', format_string)
        self.ip_listbox.select_set(0)

    def IP_details(self,IP):
        #print(IP+"*")
        mode=0
        if self.Section_for_Analyse==1:
            mode=0
        else:
            mode=1
        IPs=Draw_Graph_0_0_1.degree(mode)
        for IP_degree in IPs:
            flag=cmp(IP,IP_degree[0])
            if flag==0:
                self.inform_Text0.config(text="度")
                self.inform_Text1.config(text=IP_degree[1])
                break
        IPs = Draw_Graph_0_0_1.betweeness(mode)
        for IP_betweeness in IPs:
            flag=cmp(IP,IP_betweeness[0])
            if flag==0:
                self.inform_Text2.config(text="介数中心性")
                self.inform_Text3.config(text=round(IP_betweeness[1],5))
                break
        IPs = Draw_Graph_0_0_1.degree_centrality(mode)
        for IP_centrality in IPs:
            flag = cmp(IP, IP_centrality[0])
            if flag == 0:
                self.inform_Text4.config(text="点度中心性")
                self.inform_Text5.config(text=round(IP_centrality[1],5))
                break
        IP_list=[]
        IP_list.append(IP)
        self.inform_Text6.config(text="连接数")
        self.inform_Text8.config(text="小包占比")
        self.inform_Text7.config(text=Analyser.Node_Links_Analyse(IP_list)[0][1])
        self.inform_Text9.config(text=round(Analyser.Node_Length_Analyse(IP_list)[0][1],5))
    def Link_details(self,IP1,IP2):
        self.inform_Text1.config(text=Analyser.Link_Connection(IP1,IP2))
        String=Analyser.Link_Length_Analyse(IP1,IP2)
        self.inform_Text3.config(text=String[0])
        self.inform_Text5.config(text=String[1])
        String=Analyser.Link_Protocol_Analyse(IP1,IP2)
        self.inform_Text7.config(text=String[0])
        self.inform_Text9.config(text=String[1])
    def Choose_Ip_wrong_matched(self):
        string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
        IP = re.split(r"->| ", string)
        self.ip_listbox.delete(0, 'end')
        self.ip_listbox.insert('end', IP[0])
        self.ip_listbox.insert('end', IP[1])
        self.control_tip.config(text="IP节点                                   ")
        self.ip_listbox.select_set(0)
    def DH_Mode(self):
        if self.menu_special_method==0:
            string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
            IP = re.split(r"->| ", string)
            self.ip_listbox.delete(0, 'end')
            self.ip_listbox.insert('end', IP[0])
            self.ip_listbox.insert('end', IP[1])
            self.ip_listbox.insert('end', IP[2])
            self.control_tip.config(text="IP节点                                   ")
            self.ip_listbox.select_set(0)
        elif self.menu_special_method==1:
            string = str(self.ip_listbox.get(self.ip_listbox.curselection()[0]))
            IP = re.split(r"->| ", string)
            self.ip_listbox.delete(0, 'end')
            self.ip_listbox.insert('end', IP[0])
            self.control_tip.config(text="IP节点                                   ")
            self.ip_listbox.select_set(0)
    def Mainloop(self):
        self.root.mainloop()


app = App()
app.Mainloop()

