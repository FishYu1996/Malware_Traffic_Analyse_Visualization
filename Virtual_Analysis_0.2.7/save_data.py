# coding=UTF-8
import  db_helper
import Pcap_class


def save_data(pcap_data_class):
    packets = pcap_data_class.get_packets()
    print("loading packet num: " + str(len(packets)))
    basic_data_list = []
    TCP_data_list = []
    UDP_data_list = []
    HTTP_data_list = []
    DNS_data_list = []
    HTTPS_data_list = []
    print("List init complete")
    for packet in packets:
        id = 0
        second = packet.get_packet_head().get_second_time()
        millisecond = packet.get_packet_head().get_millisecond_time()
        lens = packet.get_packet_head().get_real_len()

        mac_src_int = packet.get_ether_head().get_mac_src()
        mac_src_str = mac_process(mac_src_int)
        mac_dst_int = packet.get_ether_head().get_mac_dst()
        mac_dst_str = mac_process(mac_dst_int)

        ip_version = packet.get_ip_head().get_ip_version()
        ip_src_int = packet.get_ip_head().get_srcIP()
        ip_src_str = ip_process(ip_src_int)
        ip_dst_int = packet.get_ip_head().get_dstIP()
        ip_dst_str = ip_process(ip_dst_int)

        ip_head_len = packet.get_ip_head().get_ip_len()
        ttl = packet.get_ip_head().get_ttl()
        protocol = packet.get_ip_head().get_protocol()

        basic_tuple = (id, second, millisecond, lens, mac_src_str, mac_dst_str, ip_version, ip_src_str, ip_dst_str,
                       ip_head_len, ttl, protocol)
        basic_data_list.append(basic_tuple)

    sql = "INSERT INTO basic_part_data (Id, Second, MilliSecond, Len, Src_mac, Dst_mac, IP_version, Src_IP, Dst_IP, " \
          "IP_head_len, TTL, Protocol) VALUES (%d,%d,%d,%d,%s,%s,%d,%s,%s,%d,%d,%d)"
    db_helper.insert_batch(sql, basic_data_list)


def mac_process(mac_int):
    mac_raw_str = hex(mac_int)
    mac_raw_str = mac_raw_str[2:]
    while (12 - len(mac_raw_str)) > 0:
        mac_raw_str = "0" + mac_raw_str
    mac_str = ""
    i = 0
    while i < 12:
        mac_str = mac_str + mac_raw_str[i:2 + i] + ":"
        i += 2
    mac_str = mac_str[0:len(mac_str) - 1]
    return mac_str


def ip_process(ip_int):
    ip_raw_str = hex(ip_int)
    ip_raw_str = ip_raw_str[2:]
    while (8 - len(ip_raw_str)) > 0:
        ip_raw_str = "0" + ip_raw_str
    ip_str = ""
    i = 0
    while i < 8:
        temp_str = str(int(ip_raw_str[i:2 + i], 16))
        ip_str = ip_str + temp_str + "."
        i += 2
    ip_str = ip_str[0:len(ip_str) - 1]
    return ip_str


if __name__ == '__main__':
    db_helper.clear_table("basic_part_data")
    my_pcap_file = Pcap_class.build_pcap("test22.pcap")
    print("PcapFile analysing complete")
    save_data(my_pcap_file)
    print("Done")
