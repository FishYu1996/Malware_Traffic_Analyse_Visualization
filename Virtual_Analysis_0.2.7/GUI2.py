# coding=UTF-8
from tkinter import *
from PIL import Image, ImageTk

class GUI_main():
    maxWidth = 0
    maxHeight = 0
    def __init__(self):
        self.root = Tk();
        self.window_init()
        self.create_menu()
        self.create_widges()

    def window_init(self):
        self.root.title('welcome to my system')
        self.maxWidth, self.maxHeight = self.root.maxsize()
        self.root.geometry("{}x{}".format(self.maxWidth, self.maxHeight))

    def create_menu(self):
        menu = Menu(self.root)
        self.root.config(menu=menu)  # 创建“系统”子菜单
        # 第一子菜单栏
        submenu = Menu(menu, tearoff=0)
        submenu.add_command(label="导入")
        submenu.add_separator()
        submenu.add_command(label="退出", command=self.root.quit)
        menu.add_cascade(label="系统", menu=submenu)
        # 第二子菜单栏
        submenu = Menu(menu, tearoff=0)
        submenu.add_command(label="总图分析")
        menu.add_cascade(label="总图信息", menu=submenu)
        # 第三子菜单栏
        submenu = Menu(menu, tearoff=0)
        submenu.add_command(label="连通图")
        menu.add_cascade(label="连通图分析", menu=submenu)
        # 第四子菜单栏
        submenu = Menu(menu, tearoff=0)
        submenu.add_command(label="所有异常IP")
        submenu.add_command(label="含dga域名")
        submenu.add_command(label="Necurs_Ammyy模式")
        menu.add_cascade(label="异常模式分析", menu=submenu)

    def create_widges(self):
        #fm1
        self.fm1 = LabelFrame(self.root,text="视图")

        #self.img = Image.open('test.png')  # 打开背景图片
        #self.photo = ImageTk.PhotoImage(self.img)  # 用PIL模块的PhotoImage打开

        width = int(self.maxWidth/3)
        height = self.maxHeight - 120

        self.label_image = Label(self.fm1,width=width, height=height)
        self.photo_main = self.Load_img('test.png',  width, height)
        self.label_image.config(image=self.photo_main)
        self.label_image.pack(side=LEFT)

        self.fm1.pack(side=LEFT,anchor="nw", padx="5", ipadx="5", ipady="2")

        # fm2
        self.fm2 = Frame(self.root)

        width = int(self.maxWidth / 3)
        height = int(self.maxHeight / 2)-45

        self.fm2_top = LabelFrame(self.fm2, text="信息输出", width=width, height=height)
        self.fm2_bottom = LabelFrame(self.fm2, text="数据图表", width=width, height=height)

        self.show_label = Label(self.fm2_top,width=72, height=20, text='欢迎使用本系统', anchor="nw")
        self.show_label.pack(side=TOP)

        width = int(self.maxWidth / 6.3)
        height = int(self.maxHeight / 6)

        self.pieGraph1 = Label(self.fm2_bottom, width=width, height=height)
        self.photo_pie1 = self.Load_img('cover1.png', width, height)
        self.pieGraph1.config(image=self.photo_pie1)
        self.pieGraph1.grid(row=0, column=0,padx=4,pady=4)

        self.pieGraph2 = Label(self.fm2_bottom, width=width, height=height)
        self.photo_pie2 = self.Load_img('test.png', width, height)
        self.pieGraph2.config(image=self.photo_pie2)
        self.pieGraph2.grid(row=0, column=1)

        self.pieGraph3 = Label(self.fm2_bottom, width=width, height=height)
        self.photo_pie3 = self.Load_img('test.png',  width, height)
        self.pieGraph3.config(image=self.photo_pie3)
        self.pieGraph3.grid(row=1, column=0)

        self.pieGraph4 = Label(self.fm2_bottom, width=width, height=height)
        self.photo_pie4 = self.Load_img('cover1.png', width, height)
        self.pieGraph4.config(image=self.photo_pie4)
        self.pieGraph4.grid(row=1, column=1)

        self.fm2_top.pack(side=TOP, anchor="nw")
        self.fm2_bottom.pack(side=TOP, anchor="nw")
        self.fm2.pack(side=LEFT, anchor="nw", padx="5", ipadx="2", ipady="2")
        self.fm2_top.pack_propagate(False)
        self.fm2_bottom.grid_propagate(False)

        # fm3
        width = int(self.maxWidth / 3)
        height = int((self.maxHeight/2)-45)
        self.fm3 = Frame(self.root)
        self.fm3_top = LabelFrame(self.fm3,text="数据分析", width=width, height=height)
        self.fm3_bottom = LabelFrame(self.fm3,text="控制命令", width=width, height=height)
        self.dataLabel1 = Label(self.fm3_top,text="属性1", width=10, height=2)
        self.dataValue1 = Label(self.fm3_top,text="数值1", width=20, height=2, anchor=W)
        self.dataLabel2 = Label(self.fm3_top,text="属性2", width=10, height=2)
        self.dataValue2 = Label(self.fm3_top,text="数值2", width=20, height=2, anchor=W)
        self.dataLabel3 = Label(self.fm3_top,text="属性3", width=10, height=2)
        self.dataValue3 = Label(self.fm3_top,text="数值3", width=20, height=2, anchor=W)
        self.dataLabel4 = Label(self.fm3_top,text="属性4", width=10, height=2)
        self.dataValue4 = Label(self.fm3_top,text="数值4", width=20, height=2, anchor=W)
        self.dataLabel5 = Label(self.fm3_top,text="属性5", width=10, height=2)
        self.dataValue5 = Label(self.fm3_top,text="数值5", width=20, height=2, anchor=W)
        self.dataLabel6 = Label(self.fm3_top,text="属性6", width=10, height=2)
        self.dataValue6 = Label(self.fm3_top,text="数值6", width=20, height=2, anchor=W)

        self.dataLabel1.grid(row=0, column=0, columnspan=1)
        self.dataLabel2.grid(row=1, column=0, columnspan=1)
        self.dataLabel3.grid(row=2, column=0, columnspan=1)
        self.dataLabel4.grid(row=3, column=0, columnspan=1)
        self.dataLabel5.grid(row=4, column=0, columnspan=1)
        self.dataLabel6.grid(row=5, column=0, columnspan=1)

        self.dataValue1.grid(row=0, column=1, columnspan=2)
        self.dataValue2.grid(row=1, column=1, columnspan=2)
        self.dataValue3.grid(row=2, column=1, columnspan=2)
        self.dataValue4.grid(row=3, column=1, columnspan=2)
        self.dataValue5.grid(row=4, column=1, columnspan=2)
        self.dataValue6.grid(row=5, column=1, columnspan=2)

        self.buttom1 = Button(self.fm3_bottom, text="按钮1", width=15, height=2)
        self.buttom2 = Button(self.fm3_bottom, text="按钮2", width=15, height=2)
        self.buttom3 = Button(self.fm3_bottom, text="按钮3", width=15, height=2)
        self.tipLabel = Label(self.fm3_bottom, text="输入命令", width=60, height=2, anchor=W)
        self.inputText = Text(self.fm3_bottom, width=60, height=5)

        self.buttom1.grid(row=0, column=0, padx=10, pady=10)
        self.buttom2.grid(row=0, column=1)
        self.buttom3.grid(row=0, column=2)
        self.tipLabel.grid(row=1, column=0, columnspan=3, padx=10, pady=10)
        self.inputText.grid(row=2, column=0, columnspan=3, padx=10, pady=10)

        self.fm3_top.pack(side=TOP, anchor="nw")
        self.fm3_bottom.pack(side=TOP, anchor="nw")
        self.fm3.pack(side=LEFT, anchor="nw")
        self.fm3_top.grid_propagate(False)
        self.fm3_bottom.grid_propagate(False)

    def resize(self,w_box, h_box, pil_image):  # 参数是：要适应的窗口宽、高、Image.open后的图片
        w, h = pil_image.size  # 获取图像的原始大小
        f1 = 1.0 * w_box / w
        f2 = 1.0 * h_box / h
        factor = min([f1, f2])
        width = int(w * factor)
        height = int(1.5*h * factor)
        return pil_image.resize((width, height), Image.ANTIALIAS)

    def Load_img(self,name, weight, height):
        self.img = Image.open(name)  # 打开图片
        w_box = weight    #我也不知道这干啥的,似乎是设置GUI的当前大小,因为这个函数的作用之一是根据GUI大小调整图片大小
        h_box = height
        img_resized = self.resize(w_box, h_box, self.img)  # 缩放图像让它保持比例，同时限制在一个矩形框范围内  【调用函数，返回整改后的图片】
        photo = ImageTk.PhotoImage(img_resized)  # 用PIL模块的PhotoImage打开.因为tkinter无法直接打开png格式的图
        return photo

    def Mainloop(self):
        self.root.mainloop()


if __name__ == '__main__':
    app =GUI_main()
    app.Mainloop()